<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20221.22.0324.2209                               -->
<workbook original-version='18.1' source-build='2022.1.0 (20221.22.0324.2209)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AccessibleZoneTabOrder.true...AccessibleZoneTabOrder />
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <AutoCreateAndUpdateDSDPhoneLayouts />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SetMembershipControl />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='preprocess_data' inline='true' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='preprocess_data' name='textscan.1x8ygn20wdapk61fioblx0sf1w6v'>
            <connection class='textscan' directory='C:/Users/Nam Mai/Work/dv/lab02/data' filename='preprocess_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.1x8ygn20wdapk61fioblx0sf1w6v' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Total Cases' ordinal='2' />
            <column datatype='real' name='New Cases' ordinal='3' />
            <column datatype='real' name='Total Deaths' ordinal='4' />
            <column datatype='real' name='New Deaths' ordinal='5' />
            <column datatype='real' name='Total Recovered' ordinal='6' />
            <column datatype='real' name='New Recovered' ordinal='7' />
            <column datatype='real' name='Active Cases' ordinal='8' />
            <column datatype='real' name='Serious, Critical' ordinal='9' />
            <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
            <column datatype='real' name='Deaths/1M pop' ordinal='11' />
            <column datatype='real' name='Total Tests' ordinal='12' />
            <column datatype='real' name='Tests/1M pop' ordinal='13' />
            <column datatype='real' name='Population' ordinal='14' />
            <column datatype='string' name='Continent' ordinal='15' />
            <column datatype='real' name='1 Case every X ppl' ordinal='16' />
            <column datatype='real' name='1 Death every X ppl' ordinal='17' />
            <column datatype='real' name='1 Test every X ppl' ordinal='18' />
            <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
            <column datatype='date' name='Date' ordinal='20' />
            <column datatype='string' name='Country Code' ordinal='21' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.1x8ygn20wdapk61fioblx0sf1w6v' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Total Cases' ordinal='2' />
            <column datatype='real' name='New Cases' ordinal='3' />
            <column datatype='real' name='Total Deaths' ordinal='4' />
            <column datatype='real' name='New Deaths' ordinal='5' />
            <column datatype='real' name='Total Recovered' ordinal='6' />
            <column datatype='real' name='New Recovered' ordinal='7' />
            <column datatype='real' name='Active Cases' ordinal='8' />
            <column datatype='real' name='Serious, Critical' ordinal='9' />
            <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
            <column datatype='real' name='Deaths/1M pop' ordinal='11' />
            <column datatype='real' name='Total Tests' ordinal='12' />
            <column datatype='real' name='Tests/1M pop' ordinal='13' />
            <column datatype='real' name='Population' ordinal='14' />
            <column datatype='string' name='Continent' ordinal='15' />
            <column datatype='real' name='1 Case every X ppl' ordinal='16' />
            <column datatype='real' name='1 Death every X ppl' ordinal='17' />
            <column datatype='real' name='1 Test every X ppl' ordinal='18' />
            <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
            <column datatype='date' name='Date' ordinal='20' />
            <column datatype='string' name='Country Code' ordinal='21' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Cases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Deaths]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Deaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Deaths]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Deaths</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Recovered]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Recovered</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Recovered]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Recovered</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Active Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Active Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Active Cases</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Serious, Critical</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Serious, Critical]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Serious, Critical</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Cases/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Cases/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Cases/1M pop</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Deaths/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Deaths/1M pop</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Tests</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Tests]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Tests</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tests/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Tests/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Tests/1M pop</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Continent</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Case every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Case every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Case every X ppl</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Death every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Death every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Death every X ppl</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Test every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Test every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Test every X ppl</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Active Cases/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Active Cases/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Active Cases/1M pop</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>20</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column aggregation='None' datatype='integer' name='[1 Case every X ppl (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='3' formula='[1 Case every X ppl]' peg='0' size='3011' />
      </column>
      <column datatype='real' name='[1 Case every X ppl]' role='measure' type='quantitative' />
      <column aggregation='None' datatype='integer' name='[1 Death every X ppl (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='4' formula='[1 Death every X ppl]' peg='0' size='17865' />
      </column>
      <column datatype='real' name='[1 Death every X ppl]' role='measure' type='quantitative' />
      <column datatype='real' name='[Active Cases/1M pop]' role='measure' type='quantitative' />
      <column caption='World Average New Cases' datatype='real' name='[Calculation_445293450974248962]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='TOTAL(AVG([New Cases]))'>
          <table-calc ordering-type='Rows' />
        </calculation>
      </column>
      <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
      <column datatype='real' name='[Deaths/1M pop]' role='measure' type='quantitative' />
      <column datatype='integer' name='[F1]' role='measure' type='quantitative' />
      <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
      <column datatype='real' name='[New Deaths]' role='measure' type='quantitative' />
      <column datatype='real' name='[New Recovered]' role='measure' type='quantitative' />
      <column aggregation='None' datatype='integer' name='[Population (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='7' formula='[Population]' peg='0' size='3.22324e+07' />
      </column>
      <column datatype='real' name='[Population]' role='measure' type='quantitative' />
      <column datatype='real' name='[Serious, Critical]' role='measure' type='quantitative' />
      <column datatype='real' name='[Tests/1M pop]' role='measure' type='quantitative' />
      <column aggregation='None' datatype='integer' name='[Total Cases (bin)]' role='dimension' type='quantitative'>
        <calculation class='bin' decimals='6' formula='[Total Cases]' peg='0' size='2.17506e+06' />
      </column>
      <column datatype='real' name='[Total Cases/1M pop]' role='measure' type='quantitative' />
      <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
      <column aggregation='None' caption='Total Tests (bin)' datatype='integer' name='[Total Tests (bin)]' role='dimension' type='ordinal'>
        <calculation class='bin' decimals='4' formula='[Total Tests]' peg='0' size='2.89088e+07' />
      </column>
      <column datatype='real' name='[Total Tests]' role='measure' type='quantitative' />
      <_.fcp.ObjectModelTableType.true...column caption='preprocess_data.csv' datatype='table' name='[__tableau_internal_object_id__].[preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D]' role='measure' type='quantitative' />
      <column-instance column='[New Cases]' derivation='Avg' name='[avg:New Cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[New Cases]' derivation='Avg' forecast-column-base='[avg:New Cases:qk]' forecast-column-type='forecast-value' name='[fVal:avg:New Cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Month' name='[mn:Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
      <column-instance column='[1 Case every X ppl]' derivation='Sum' name='[sum:1 Case every X ppl:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Active Cases/1M pop]' derivation='Sum' name='[sum:Active Cases/1M pop:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Deaths/1M pop]' derivation='Sum' name='[sum:Deaths/1M pop:qk]' pivot='key' type='quantitative' />
      <column-instance column='[F1]' derivation='Sum' name='[sum:F1:qk]' pivot='key' type='quantitative' />
      <column-instance column='[New Cases]' derivation='Sum' name='[sum:New Cases:qk]' pivot='key' type='quantitative' />
      <column-instance column='[New Deaths]' derivation='Sum' name='[sum:New Deaths:qk]' pivot='key' type='quantitative' />
      <column-instance column='[New Recovered]' derivation='Sum' name='[sum:New Recovered:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Serious, Critical]' derivation='Sum' name='[sum:Serious, Critical:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Tests/1M pop]' derivation='Sum' name='[sum:Tests/1M pop:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Total Cases/1M pop]' derivation='Sum' name='[sum:Total Cases/1M pop:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Calculation_445293450974248962]' derivation='User' name='[usr:Calculation_445293450974248962:qk:2]' pivot='key' type='quantitative'>
        <table-calc ordering-type='CellInPane' />
      </column-instance>
      <column-instance column='[Calculation_445293450974248962]' derivation='User' name='[usr:Calculation_445293450974248962:qk]' pivot='key' type='quantitative'>
        <table-calc ordering-type='Rows' />
      </column-instance>
      <column-instance column='[Date]' derivation='Weekday' name='[wd:Date:ok]' pivot='key' type='ordinal' />
      <column-instance column='[Date]' derivation='Weekday' name='[wd:Date:qk]' pivot='key' type='quantitative' />
      <column-instance column='[Date]' derivation='Week' name='[wk:Date:ok]' pivot='key' type='ordinal' />
      <group hidden='true' name='[Exclusions (WEEK(Date),WEEKDAY(Date))]' name-style='unqualified' user:auto-column='exclude'>
        <groupfilter function='crossjoin'>
          <groupfilter function='level-members' level='[wk:Date:ok]' />
          <groupfilter function='level-members' level='[wd:Date:qk]' />
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[mn:Date:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>2022</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>5</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[wd:Date:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>2022</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>4</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>3</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>7</bucket>
            </map>
            <map to='#e15759'>
              <bucket>2</bucket>
            </map>
            <map to='#edc948'>
              <bucket>6</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>5</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>1</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[wk:Date:ok]' type='palette'>
            <map to='#4e79a7'>
              <bucket>2022</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>4</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>3</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>19</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>7</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>20</bucket>
            </map>
            <map to='#e15759'>
              <bucket>2</bucket>
            </map>
            <map to='#e15759'>
              <bucket>21</bucket>
            </map>
            <map to='#edc948'>
              <bucket>6</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>5</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>1</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]&#10;[:Measure Names]' type='palette'>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;France&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[avg:New Cases:qk]&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Italy&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[avg:New Cases:qk]&quot;</bucket>
              </multibucket>
            </map>
            <map to='#e15759'>
              <multibucket>
                <bucket>&quot;Germany&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[avg:New Cases:qk]&quot;</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Continent:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>%null%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Europe&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Australia/Oceania&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;South America&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Asia&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;North America&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Africa&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks and Caicos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DPRK&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MS Zaandam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;CAR&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Pierre Miquelon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;St. Vincent Grenadines&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DRC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Barth&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;S. Korea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]&#10;[:Measure Names]&#10;[none:Forecast Indicator:nk]' palette='tableau20_10_0' type='palette'>
            <map to='#4e79a7'>
              <multibucket>
                <bucket>&quot;France&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Actual&quot;</bucket>
              </multibucket>
            </map>
            <map to='#59a14f'>
              <multibucket>
                <bucket>&quot;Italy&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Actual&quot;</bucket>
              </multibucket>
            </map>
            <map to='#8cd17d'>
              <multibucket>
                <bucket>&quot;Italy&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Estimate&quot;</bucket>
              </multibucket>
            </map>
            <map to='#a0cbe8'>
              <multibucket>
                <bucket>&quot;France&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Estimate&quot;</bucket>
              </multibucket>
            </map>
            <map to='#f28e2b'>
              <multibucket>
                <bucket>&quot;Germany&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Actual&quot;</bucket>
              </multibucket>
            </map>
            <map to='#ffbe7d'>
              <multibucket>
                <bucket>&quot;Germany&quot;</bucket>
                <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]&quot;</bucket>
                <bucket>&quot;Estimate&quot;</bucket>
              </multibucket>
            </map>
          </encoding>
          <encoding attr='color' field='[:Measure Names]' palette='color_blind_10_0' type='palette'>
            <map to='#1170aa'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Active Cases/1M pop:qk]&quot;</bucket>
            </map>
            <map to='#9c755f'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Serious, Critical:qk]&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Total Cases/1M pop:qk]&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[usr:Calculation_445293450974248962:qk:2]&quot;</bucket>
            </map>
            <map to='#edc948'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:1 Case every X ppl:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Deaths/1M pop:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:F1:qk]&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[usr:Calculation_445293450974248962:qk]&quot;</bucket>
            </map>
            <map to='#fc7d0b'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]&quot;</bucket>
            </map>
            <map to='#ff9da7'>
              <bucket>&quot;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Tests/1M pop:qk]&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United Kingdom&quot;' />
      </semantic-values>
      <date-options start-of-week='monday' />
      <default-sorts>
        <manual-sort column='[none:Forecast Indicator:nk]' direction='ASC'>
          <dictionary>
            <bucket>&quot;Actual&quot;</bucket>
            <bucket>&quot;Estimate&quot;</bucket>
          </dictionary>
        </manual-sort>
      </default-sorts>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='preprocess_data.csv' id='preprocess_data.csv_8F1D323D18704E659F8CDFB34989D06D'>
            <properties context=''>
              <relation connection='textscan.1x8ygn20wdapk61fioblx0sf1w6v' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Total Cases' ordinal='2' />
                  <column datatype='real' name='New Cases' ordinal='3' />
                  <column datatype='real' name='Total Deaths' ordinal='4' />
                  <column datatype='real' name='New Deaths' ordinal='5' />
                  <column datatype='real' name='Total Recovered' ordinal='6' />
                  <column datatype='real' name='New Recovered' ordinal='7' />
                  <column datatype='real' name='Active Cases' ordinal='8' />
                  <column datatype='real' name='Serious, Critical' ordinal='9' />
                  <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
                  <column datatype='real' name='Deaths/1M pop' ordinal='11' />
                  <column datatype='real' name='Total Tests' ordinal='12' />
                  <column datatype='real' name='Tests/1M pop' ordinal='13' />
                  <column datatype='real' name='Population' ordinal='14' />
                  <column datatype='string' name='Continent' ordinal='15' />
                  <column datatype='real' name='1 Case every X ppl' ordinal='16' />
                  <column datatype='real' name='1 Death every X ppl' ordinal='17' />
                  <column datatype='real' name='1 Test every X ppl' ordinal='18' />
                  <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
                  <column datatype='date' name='Date' ordinal='20' />
                  <column datatype='string' name='Country Code' ordinal='21' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <worksheets>
    <worksheet name='Box Plots'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Box plots of various measures per 1M population by continents</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='real' name='[1 Case every X ppl]' role='measure' type='quantitative' />
            <column datatype='real' name='[Active Cases/1M pop]' role='measure' type='quantitative' />
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='real' name='[Deaths/1M pop]' role='measure' type='quantitative' />
            <column datatype='real' name='[Tests/1M pop]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total Cases/1M pop]' role='measure' type='quantitative' />
            <column-instance column='[1 Case every X ppl]' derivation='None' name='[none:1 Case every X ppl:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Cases/1M pop]' derivation='None' name='[none:Active Cases/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Deaths/1M pop]' derivation='None' name='[none:Deaths/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tests/1M pop]' derivation='None' name='[none:Tests/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Active Cases/1M pop]' derivation='Sum' name='[sum:Active Cases/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Deaths/1M pop]' derivation='Sum' name='[sum:Deaths/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Tests/1M pop]' derivation='Sum' name='[sum:Tests/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Total Cases/1M pop]' derivation='Sum' name='[sum:Total Cases/1M pop:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:1 Case every X ppl:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Active Cases/1M pop:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Deaths/1M pop:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Tests/1M pop:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:1 Case every X ppl:qk]</column>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Tests/1M pop:qk]</column>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Deaths/1M pop:qk]</column>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Active Cases/1M pop:qk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Active Cases/1M pop:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Active Cases/1M pop:qk]' z-order='1' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Deaths/1M pop:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Deaths/1M pop:qk]' z-order='2' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Tests/1M pop:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline2' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Tests/1M pop:qk]' z-order='3' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Total Cases/1M pop:qk]' boxplot-mark-exclusion='false' boxplot-whisker-type='standard' enable-instant-analytics='true' formula='average' id='refline3' label-type='automatic' probability='95' scope='per-cell' symmetric='false' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Total Cases/1M pop:qk]' z-order='4' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Active Cases/1M pop:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Deaths/1M pop:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Tests/1M pop:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
          <pane id='4' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Total Cases/1M pop:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Circle' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.25' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</rows>
        <cols>([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Active Cases/1M pop:qk] + ([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Deaths/1M pop:qk] + ([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Tests/1M pop:qk] + [federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:Total Cases/1M pop:qk])))</cols>
      </table>
      <simple-id uuid='{A947E7B7-82AA-424D-B3AF-61F2893EC5D0}' />
    </worksheet>
    <worksheet name='COVID Cases Across Continents'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
            <column datatype='real' name='[New Deaths]' role='measure' type='quantitative' />
            <column datatype='real' name='[New Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Cases]' derivation='Sum' name='[sum:New Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[New Deaths]' derivation='Sum' name='[sum:New Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[New Recovered]' derivation='Sum' name='[sum:New Recovered:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]' enable-instant-analytics='true' formula='average' id='refline0' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]' z-order='1' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]' enable-instant-analytics='true' formula='average' id='refline1' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]' z-order='2' />
            <reference-line axis-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]' enable-instant-analytics='true' formula='average' id='refline2' label-type='automatic' probability='95' scope='per-pane' value-column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]' z-order='3' />
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
          <pane id='3' selection-relaxation-option='selection-relaxation-allow' x-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</rows>
        <cols>([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk] + ([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk] + [federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]))</cols>
      </table>
      <simple-id uuid='{EE58B12E-26B6-45BE-A23A-D600F9CDD88C}' />
    </worksheet>
    <worksheet name='Europe Sum New Cases'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Cases]' derivation='Sum' name='[sum:New Cases:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]'>
            <groupfilter function='member' level='[none:Continent:nk]' member='&quot;Europe&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[Longitude (generated)]' field-type='quantitative' max='7167727.7103873827' min='-3918427.9174662214' projection='EPSG:3857' range-type='fixed' scope='cols' type='space' />
            <encoding attr='space' class='0' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[Latitude (generated)]' field-type='quantitative' max='10072532.495018359' min='3910631.5512762927' projection='EPSG:3857' range-type='fixed' scope='rows' type='space' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Multipolygon' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]' />
              <lod column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' />
              <geometry column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[Latitude (generated)]</rows>
        <cols>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{1ACF68E1-6025-4681-8F5E-F1A51CFD480D}' />
    </worksheet>
    <worksheet name='Forecast of New Cases of Germany, France, Italy'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
            <column-instance column='[New Cases]' derivation='Avg' name='[avg:New Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[New Cases]' derivation='Avg' forecast-column-base='[avg:New Cases:qk]' forecast-column-type='forecast-value' name='[fVal:avg:New Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Forecast Indicator]' derivation='None' forecast-column-base='[Forecast Indicator]' forecast-column-type='forecast-indicator' name='[none:Forecast Indicator:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <format attr='title' class='0' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]' scope='cols' value='Date' />
            <format attr='title' class='0' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]' scope='rows' value='New Cases' />
          </style-rule>
          <style-rule element='label'>
            <format attr='text-format' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]' value='*dddd, mmmm d' />
          </style-rule>
        </style>
        <panes>
          <pane id='6' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Line' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' />
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]' />
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Forecast Indicator:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[fVal:avg:New Cases:qk]</rows>
        <cols>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]</cols>
        <forecast-specification auto-forecast-agg='true' band-confidence-level='95.000000' enabled='true' fill-type='fill-missing' ignore-last='1' model-type='custom' range-periods='Week-Trunc' range-size='1' range-type='end-of' season-type='ets-multiplicative' show-prediction-bands='true' trend-type='ets-additive' />
      </table>
      <simple-id uuid='{A3B19176-B374-4A43-A969-82EBF273D470}' />
    </worksheet>
    <worksheet name='New Deaths and Recovered cases in Germany, France and Italy'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[New Deaths]' role='measure' type='quantitative' />
            <column datatype='real' name='[New Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Deaths]' derivation='Sum' name='[sum:New Deaths:qk]' pivot='key' type='quantitative' />
            <column-instance column='[New Recovered]' derivation='Sum' name='[sum:New Recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;France&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Germany&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Italy&quot;' />
            </groupfilter>
          </filter>
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]' included-values='non-null' />
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</column>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]</column>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]' field-type='quantitative' fold='true' scope='rows' type='space' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='1' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]' />
            </encodings>
          </pane>
          <pane id='2' selection-relaxation-option='selection-relaxation-allow' y-axis-name='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]' />
            </encodings>
          </pane>
        </panes>
        <rows>([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk] + [federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk])</rows>
        <cols>([federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk] * [federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk])</cols>
      </table>
      <simple-id uuid='{04B6B2F6-C675-4FF1-A136-315E0BD676BA}' />
    </worksheet>
    <worksheet name='New Recovered of Vietnam vs Thailand'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[New Recovered]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Recovered]' derivation='Sum' name='[sum:New Recovered:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</column>
          </slices>
          <aggregation value='false' />
        </view>
        <style />
        <panes>
          <pane id='12' selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]</rows>
        <cols>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{8D7600CA-F120-4E20-AC68-E6BC41AF30B6}' />
    </worksheet>
    <worksheet name='SEA New Case Percentage'>
      <layout-options>
        <title>
          <formatted-text>
            <run>&lt;Sheet Name&gt;</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[New Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Deaths]' derivation='Sum' name='[pcto:sum:New Deaths:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[New Deaths]' derivation='Sum' name='[sum:New Deaths:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' direction='DESC' using='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]' />
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='752' />
            <format attr='cell-h' value='752' />
            <format attr='cell' value='94' />
            <format attr='cell-q' value='470' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' />
              <wedge-size column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[pcto:sum:New Deaths:qk]' />
              <text column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-show' value='true' />
                <format attr='mark-labels-cull' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
        <mark-labels>
          <mark-label id='0' label-state='on'>
            <tuple-reference>
              <tuple-descriptor>
                <pane-descriptor>
                  <x-fields />
                  <y-fields />
                </pane-descriptor>
                <columns>
                  <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
                  <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Deaths:qk]</field>
                  <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[pcto:sum:New Deaths:qk]</field>
                </columns>
              </tuple-descriptor>
              <tuple>
                <value>&quot;Thailand&quot;</value>
                <value>938.0</value>
                <value>0.69636228656273202</value>
              </tuple>
            </tuple-reference>
          </mark-label>
        </mark-labels>
      </table>
      <simple-id uuid='{0CCD928E-0C97-4BCA-B8BC-03A1F029D0FD}' />
    </worksheet>
    <worksheet name='Stacked Area Chart by Continents'>
      <layout-options>
        <title>
          <formatted-text>
            <run>Proportion of new cases trend by continents</run>
          </formatted-text>
        </title>
      </layout-options>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.1jqhqk11fqzhlt1323ii20qnnhqv' />
          </datasources>
          <datasource-dependencies datasource='federated.1jqhqk11fqzhlt1323ii20qnnhqv'>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Cases]' derivation='Sum' name='[sum:New Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='quantitative' column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]' included-values='non-null' />
          <slices>
            <column>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Area' />
            <encodings>
              <color column='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]</rows>
        <cols>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]</cols>
      </table>
      <simple-id uuid='{AB5C98FA-619E-4968-BEE9-A1E260ADC429}' />
    </worksheet>
  </worksheets>
  <dashboards>
    <dashboard _.fcp.AccessibleZoneTabOrder.true...enable-sort-zone-taborder='true' name='Dashboard 1'>
      <style />
      <size maxheight='800' maxwidth='1000' minheight='800' minwidth='1000' />
      <zones />
      <devicelayouts>
        <devicelayout auto-generated='true' name='Phone'>
          <size maxheight='700' minheight='700' sizing-mode='vscroll' />
          <zones>
            <zone h='100000' id='28' type-v2='layout-basic' w='100000' x='0' y='0'>
              <zone h='98000' id='27' param='vert' type-v2='layout-flow' w='98400' x='800' y='1000' />
              <zone-style>
                <format attr='border-color' value='#000000' />
                <format attr='border-style' value='none' />
                <format attr='border-width' value='0' />
                <format attr='margin' value='8' />
              </zone-style>
            </zone>
          </zones>
        </devicelayout>
      </devicelayouts>
      <simple-id uuid='{39EB2E22-44B1-4617-BC64-B308AAE1751E}' />
    </dashboard>
  </dashboards>
  <windows source-height='30'>
    <window class='worksheet' name='Box Plots'>
      <cards>
        <edge name='left'>
          <strip size='209'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:ok]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[twk:Date:ok]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[wk:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BD6B778E-FAF0-4BD3-BA1A-29ABE6370378}' />
    </window>
    <window class='worksheet' name='COVID Cases Across Continents'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{1E1776F3-6F97-48D1-9FFE-7B725B2E5443}' />
    </window>
    <window class='worksheet' name='Stacked Area Chart by Continents'>
      <cards>
        <edge name='left'>
          <strip size='211'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[dy:Date:ok]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Recovered:qk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{0FB59B81-CDF4-4470-B19F-75D3926E2905}' />
    </window>
    <window class='worksheet' name='SEA New Case Percentage'>
      <cards>
        <edge name='left'>
          <strip size='145'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{770F747D-13DC-48A5-AAFD-4BA80EAC59E0}' />
    </window>
    <window class='worksheet' name='New Recovered of Vietnam vs Thailand'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='128'>
            <card pane-specification-id='12' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{7D39607E-D82A-4BE2-B66E-3CC02C6147C5}' />
    </window>
    <window class='worksheet' name='Europe Sum New Cases'>
      <cards>
        <edge name='left'>
          <strip size='169'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[sum:New Cases:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Continent:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[usr:Calculation_445293450972991489:qk]</field>
          </color-one-way>
        </highlight>
        <default-map-tool-selection tool='1' />
      </viewpoint>
      <simple-id uuid='{08DC8508-DE9F-4F6D-A956-84CA7407F8C1}' />
    </window>
    <window class='worksheet' name='Forecast of New Cases of Germany, France, Italy'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='125'>
            <card pane-specification-id='6' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]&#10;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]&#10;[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Forecast Indicator:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Forecast Indicator:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{37F65853-E017-443E-8AE8-55CD8D4FAAF7}' />
    </window>
    <window class='worksheet' maximized='true' name='New Deaths and Recovered cases in Germany, France and Italy'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='31'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='1' param='[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[:Measure Names]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[none:Country:nk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[tdy:Date:qk]</field>
            <field>[federated.1jqhqk11fqzhlt1323ii20qnnhqv].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F3713F6B-30B0-4CBD-9A42-36F821D4E028}' />
    </window>
    <window class='dashboard' name='Dashboard 1'>
      <viewpoints />
      <active id='-1' />
      <simple-id uuid='{1836BD02-5D50-4D67-8F88-499912035004}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Box Plots' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAAgAElEQVR4nO29d3Bd153n+bnp5YycASIQIADmLFISlUW3JUuyLAdNt8fe7pma3i3XTvfO
      7PbMdPV4aqq6vNs97Z1xu2bHLXumx7ZsOcgKVqQoShQpRjADIHLOeHh4+d20fwCCSBGkSDCB
      fPdTxWI9vBvOve98z/mde39BME3TxMIiSxFvdwMsLG4nlgAsshpLABZZjSUAi6zGEoBFVmMJ
      wCKrsQSQRSSTSdLp9O1uxrLCEkAWMTk5SSQSud3NWFZYArDIaiwBWGQ1lgAsshpLABZZjSUA
      i6zGEoBFVmMJwCKrsQRgkdVYArDIaiwBWGQ1lgAsshpLABZZjSUAi6zGEoBFVmMJwCKrsQRg
      kdVYArDIaiwBWGQ1wpVSI0YiETo7O29leyxuIqZpIgjCDd/2TuaKArC4uxgYGMBut5Ofn/+5
      27a0tLBmzRpE8e42Eu7uq7NYMrIs3+4m3BIsAVgsSl1dXVaYQJYALC5hZGSEDz74gGywjrNj
      nrttmGiZJLMzsxiOADk+BwtjqqmTjkeJzEZJiW5CAR8ex/L4Of7yL/+SSCTCrl27rDWAxXVg
      ZpgZPsubL/2Ktw92EDcu+C4zTdeJD3j1l7/kF28fpXciscgBVCIjw4STGsbdPxjfFpbHkHOX
      YmZixBJR5IL1VInD9MUbafTOjzkzw0wYQRq++CdsWeFFWtTcTtB/5BDJDQ+zrsiDeAtM8vaB
      KTR9TqmnusaQJAlBELApIgICsiTi9zgIeBzI0q0dP+OpDEMTUZJpDadDpjDkweeyX9cxLQHc
      NEwysSSx0QiFzdV4Zs8z1B9nVaOXzOwEY309TE6DjW7OGDmU5TkwDDsOMUV4cpKks5DyfCfF
      qzcj5TuQRMBMMdnXy0gkgynb8BVUUh4QiU70MTSZRDNFbO4A+cVFhJzSklr9//7mKLGkigD8
      +5/sA0FElgT8HjuyKOK0K6yrK+bxzdUUhDw39I59Ht3DYf7+5aOMTMUozvXw3ANN3Lem4rqO
      aQngZmFqxJMxJmb91N7jJ9PhxRwdJLGqAW1mhM6O83QOgegcZ2SqAWeDxMAYKKkIk5NjqOU7
      yAt6Ofv7/bi+vps1AQ/x/hb2f3iOiYQOdjf5zUFK3E5G249wuCtOxgDFW0hNs52tjXkoS2i2
      qqrAxfaWpptMRVIACAKYCKytKbzlAogmMoxMRjGBkakYg+Oz131MSwA3CVONE58dZNpbS6Hd
      TcThxJkZYiBeT335ah540MA3CvbitTTnAzOn6DnfxZRewNpd91BZ4MUmTV1wxBlO7zmJsOVp
      vtmQh6SnmU0ZiJJAoLiOBqeGoaWYHp9itL2HSGMeuUtotySKwMW2ligIOOwSoiBikyVKcr14
      XbbruDtLw65IeN12ovE0XpcNv+f6zB+wBHCTMFETMcZaT9OfNvloXy9qZITRqE5iKM7KlR4W
      M+cNezFNDQ2sKPIhX7LBGH1TZdxbn4siCiA6CCg6qdgwfe299CVUNE0lMZNG9gSJw5IEcP+6
      Kl49IZHR4dHN1QiihCQKeF02JFHEocisKAlSkutdwtGvj5I8H1/aUc/ETJy8gJvVKwqu+5iW
      AG4GpkYiPkXfsEiwIMzYGIBGWpVIDA0Tr6tjMePB7vPhsdsW6fwAIQoDh+geiVNQ7EE0VZKZ
      NGpqlN7JPO597h5yxSg9J0/Q2r30R0bP7Wrg3Z/JZFLwJ1/csKzeCBeGPDxzX8MNPebyubq7
      CFNLkYqMkql8jC9/ceVcZzdTjLaeoq1/hJF4LbXXfNRcmrfksvfw+7xllxFlGWdZM5uK/QQd
      3Rx5/x0UWUSNJkib/ht+TXcrlgBuBoKCO1BO88bKT0d6wUGopIIaVxQJwFNIcSHI7vnvHQWs
      KJPwey78SVxUbm5CcdgQEcltupdNmaO0jSUwRAWP043D5aV5zRgn+mJIdj/5xSvwigqB62j+
      k08+STqdvutfgoHlDZpVXIs36NDQEMXFxXe9P9DdL3GLJTE+Pp4VvkCWACwWpby8/K4f/cES
      gMVliEajt7sJtwRLABaLEg6HLRPIInuprq62TCCL7GV0dPR2N+GWYAnAYlHi8bhlAllkL/X1
      9VlhAllvgi0u4S/+4i+IRqOIosj3v//9292cm4olgOVAqov3X36bbucWHr5vDWWBpQWz3Cgm
      JiaIRCJZ4Qpx91/hHUBycAihogQtlSE5E8W44tYmauoEP/93L9F2i9p3N2PNALcbM8lAv44j
      v5rV/n6mMzNEdT9+SbjsIlS2r+bZv2xChMtus1T7/V/+/R4i8TQAhmHy3F/9CtMEExO/0869
      ayto7RmnazQCmJTk+djeWEZFgZ/hyVlePXiejGrwzM5aHttai8N+/UErS+XlD9t49WAH0USa
      LfUl/PMnN+B2XhzIYwngNmOqo4zgJKQUUFnexwczKrG4ic8noI8d4Zc/f42jvWF0JcSaL/+v
      fHNLDlrmBL/4L2Ee/bMHCSbCnHn7R/x6/xARTSF3xQYefupLbCt3Lhp083nEk6m5vKDMBUam
      M9rCd5Nagtc/7iCjGRjG3DzVOxJmbDpGZWEAQRCYjCQBONMXZnVtghXFt08AR9pHmJyJA7D/
      dB//dPda3M6Lt7EEcFsxyQwOojk9KKEgXlspqQ8mSBQXYHp99B87hev+b/FvagtxESeSdiF8
      NlzR5qF807P8b7tycIkphnu66Dvbzmz5WpYSFXAl0cxlh5DQDZP5/o8oitgUCZsiYZqfzDwm
      kiQg3oo0FldAlgQEYW4mlaXF11WWAG4nZobBgRi6KSCYs4QNH7kz7YzGyyk0vZSuquDt3/yG
      nx8ronJlE6ubaj8Trm5iajGmOg7y+oFWxmczaJqLkoadrIQlCSAv5CUsipj6nBjyg+45E8g0
      8TltbG8uo6Nvku7xWcCkOMfLpvoSSvN9jE5FicRTqJrB2hU5FAWdn3e6m8q2hhJmY2miyQzr
      64pw2C7t7lY8wG3ETPXw4atvs/94P0l57nmEqWoU3fc8X95ZT65dR9NmGe0bor/9AHuGm/nz
      f7YdmzpvAv3LndimTvH2yxG2ffU+SpwZRlrPcu5clLqvPMBnE4ZcbTzAH//xHy88BXrxxRdv
      0tUvD6wZ4LZhkh4ZJZ7TwON/+jzrSudCw4yRg/zs4xlm40nEsR4mTBced4iKVWtZGdNJAxcu
      4wRBxu4SSE6O0K+G6e3qZSKdQ91tuaY7D0sAtw2TWMpBSUGAwnz3wl/FonpWu86imyqSPEvb
      u+/TNRnHVIrZ9NSXCAoCuuAmt1BHERTcrgrq81t49ZfHkEMlVJRVUuGxcT1LzxUrVjA2NobH
      c2vz/twOLBMoi7iWkMiOjg5qamruencI60WYxaJcjUjuBiwBWCxKd3e35Q1qkb0Eg8G73vwB
      SwAWlyEbFsBgCcDiMgwMDFgmkEX2kp+fb5lAFtlLNsQCgCUAi8swOjqaFSaQ9Sb4qpilqz1C
      bkkePo9jSW7GdxIvvvgimUyG8vJyRFEknU7zxhtvABAKhXjyySdvcwtvHDdRACl6DrzDsXQN
      j+2ow61It6/jGBmiE52cGAmxc23hte8f7qF3yomnQMCnR+hrOcbxrhHimoSnqJl7711FaPGk
      /ncke/bsoaSkhGg0iiRJxGKxBQFUVlbeVQK4eSZQqp/TgwaZ1pP0pzSuazYNd9PZN8jwUrP1
      GRrJ2SHa+iIAJKeHaD38Lucmrm736Z4pHHlu7C4YOPQehwcS+IqrqF5RjidyjFfeaiO+xKZd
      OyZapocPf36AoVt2zruXmzYDJHtbSRSvY5tvD0f7M9Q12BCX+lQhOcVk2EnAXUrxDajMIzu9
      5BZXYbquYmNjiu4ZJ/kFTlypbt7rlanatIFVlQU4JZPkVJD3fvsRpycb2LqUmkRLQJQClDdK
      3IwiRT9/r41kei4KrH1gCgSBVOLTGsaqZjAVSZDjdxGJpTjUOsS53glU3UAQBKT5qpJOu0RN
      SQ7N1fkEvc6l//Y3mZskAJXBjjgFq70UyGVMHxpCX1mHJJpomW72vx5n/VNr8KMTnxqmo2WU
      goc2khMZoe3YBxxumyQjB6lavYnawAznD7zNsREJxbkXd7CGnQ9uoVHp5USynIJkG8eOncW+
      7ivsqohx7L29nB2cRUUhVLODxx9pJPjZ1sXjTA0PYQtUk5+covvsUT460U0kZeIqamDzlg3U
      l/qQAWOql5g3j2KXF2HsAOniRqqK83EqIgLgyqtje937/KYvztYcJ5n4EC1vv8vx4QSCv5iG
      zbvYUQEDrYc5eKyLsOGlomkjm9fXkedIMHS6hSPHWhmOZRC8FWy6bztNZTk4Rg/z/oBIcrid
      odEwaamAzV96go35Ngxjmq7OKBtWl6OlovQee4MPT08Q12X8xSvZuHM7DblLK2J38EwfGU0H
      YDKSQBBE0snkwvfRZJoj7cM8trmG4akov9vfzshUFMM0AQFRmIsKkyWBc72TyJLIpvpi7IsE
      oywHbk6r1H5aY0Ws9tqw+2opHj5Kr15DnSRi6LMM9czQBICBmoozNTiOlyRMDjMyGWDdrrW4
      DAPZ48PvDbFmdTPpAjuevErKcrzk57iRxiYZPNvPmbibusbtlJW6sUlxghXr2VkvI5o6yZ4T
      HB5o5NGSi5unpRLMjI/gqANkGXduOU1by3DIEB8eJjI5zFSejwK7wVh3FHduPi6vTLxjGtnt
      QpLEC9YzEj6/g/B0Aj1j0nNwD52uVdz7gA8EEcWTIjw1zdCkl+Ydu5D1OKMTU/R2juFv8qH4
      iqhbF2KlXcSM9NE9PEVp0EdhYoz2LqioamJbg0Km5wBH2sNsyMvHMCIM9YRpAtyCjCtnBRt2
      NmMTVSLhCGNtfVTsqOVqJrjPklG1T5/+zPXpi++dZhCenRNEKqMzPZtEXyhjb6Kbc/9r+pyA
      oon0vDiWJzdFAGpvK+HcOrx2O6JcTFP5MEd6dOpWXmnJoWAXBVLhVo60qNTX1VBb7CcYcCIX
      F1MkOwmU1lN/gZkRN4Os2rCKpsoQLllC0BXUgZPs7xwkljHQExH83jCPllzBO16CdGSY1oNn
      GI4kScWj+JsfIa+ingJljIG0n1y7B48koNrtkLn0EKZhzNXnUgdo68xh0/PrqPEoYBro8XG6
      jhzmnfd6UHxOJFQScTe1291UNYUgNU5ny3E6J+Kkk7PM5ENtVTGFQLCyidWNpRT6ZExvHy1n
      9UvOLaKjx4Y48nEnU7E0qZRMbtVWapcogIDXQ/iTdwCLmC0ep401NXMPEvICLtbVFXLs/Aiq
      ZsxXkp+rJu9yyKxeUUB1SRBFXr5P22+CAFR62zvoOXyI/3zAhiSCFp0gk+rhmZVXilOS8Zc0
      sPMLXoZGRhkaOM7+kVEaN++cny0uxVdYSXlhDq55c2Tm5Aecdjby2NM7sYsmmfNv8DtVhSuE
      h8wODzM0FqN85xfZ4VNI9h3mfEZB10Ed6ifpycHm8SIJIBYUEd8/SKougOn45HFoms6OGSo2
      +TAZRsNFwGube7ogSIiCCXYfVbu+wgMNvvmzKjh9PvyTXRwaTeFufJinClzIsXbePGdHnh9R
      bW4vLruCKAA22yI/lko83sPJcwrrH/syuXad6b5+Boc0tEu2vTq+88xG/u2hfwRgbU0BoigS
      j8d4Y/57p12mpjQEQEHQw7d2r+O5XY0Y5vxkMW8CSaKAy67gmS+vuly58QLI9NE2WskjX/0i
      FSHPXEE4o4c3fnyGHr2OMgQENU5CNVDT0wy0tdAR8VGJSiodI2nmUt1URlmBm5M9URKxDDhh
      ZjqMGIiiBV0IgoAIyDYFUfzUHEnPzGLPL6O0LACRAU6MTUPRlRprkklpmKKL/IpSipjhfFuC
      eFoDVIYHVXx5Cl7v3CNcIW81DdrPefeQxIPbmyhwGowefYmXxxr5o3IZWSumLPABB86uY3d9
      ANQksYyBzelA7BgiuamOGr9AcmKS2WSMpB5HE50ECsspyc8wPh4lkRK4dJy/XPMNND1JQgxR
      VVaKMz3KRHya2fTSS+QV5bgXsjm4HQqSJIH+6XpCEARs8lyGBUUWyfW7yPUvZa5ZHtxwARhD
      XcxW1rOptIICnzLXOc0cdjYc5ESPQVXFClbX7OH/+6uPkVx5lJSXEfQACGiREU78/g0O90fQ
      nIWs2vYADxU5QColL/02e3/8Bq/41vAHTz3I+kXOnbt+Pbzw93z3xRT2gmYeqs353PYGigLY
      Og/xq7/+Lhl/BbX5JrYSGbRhBnQPRYof7yfpPSQ/63Y/ivHW2/z4//4VUU3GV7aZJ5+/j0IF
      BMlPw/3bGf71D/nu/4wjhipY98CX2F3VwMqBN3npb/cRMxT8RQ1s23Uvm+pWkN/+Du/++DV+
      K+TR0BDClHK4+sSICm5HGZXKT/mb776GEiqhvLiMHMdVHyDrueEhkaaeIa1L2BTxokdfejqB
      KjmxS6BnkqQyOggSkizNjeYOG4KuoaYzqLqBKUgoNhs2RUbEQFMzZDIqhqBgs9tQBA3VlJAl
      iYX0M6ZGOpkio5sIkoJdBhUbLkXAMFTSmojTLmPoOrqmIigOJEFHy2TmFn+CjCyBIMqYg0c5
      OptDWVUNFf4LpnDTQM2kyagahikgyjYcDgVJEMA0MU2dTCqFqpsgSsg2B3bJRFczpD/ZR5JR
      bDYUCfRPrgsRWZEwzbkcOxIqaVNBkcS56zMypDQJuyICOumkgc2lIJgmeiZFKmOAKCJJMqIA
      st12iZCuNiQyGo1y9uxZNm7cuJBXJzH/KFQUxbvKVdqKCV6UJB0HTpLMK2JFTQWe5fkI+5q5
      lpjglpYW1qxZc9c7xd3dV7dUEoOMSS6c9hDuu6TzXytr1qyx3KGzFlctO7asprbce9c7vl2O
      kydPZoU3qCUAi6zGEoBFVmMJwGJRHA6HtQawyF4qKj6bWvfuxBKAxSV0dHTw7rvvMhMOMzMz
      QzqdJh6P093dvej2kUiE1tZWxsbGbnFLr5/l6aN6RxFlqHWAyMIDExHFHqS4ugD3lXZbxnzv
      e98jEongdDiQZZma2lrC4TAvvPACf/d3f3fJ9idOnOAHP/gBu3fv5pvf/Oatb/B1YAnguunh
      rX/8PcmST8JTFDyhJh66gwWQTVgCuAGIdY/zp99cc7ubcUM43jGGqs3VP5qMJJBkGf9MnMhs
      kmRa5cNT/QjCnKNcaZ4PTTcYnpwFYHgyyv5T/SiyiGmCbhjkBdyU5ftw2pUrntc0TeKpDCNT
      cXTDQBQEZmIpvC4bJbk+dN1gNBxDEkWKcrx4XUsL+PnkXDOxFGPTcUsANw+NZCzMxBgUVOdh
      RyM+PUM0YeArDaJNRdEMDTU9w+ikSW55KQVeg4n+PoYno2SwEyxdQVWBD5ssMtPdyqSRITwR
      RxcUAqX11JZ6kU2dTHyawZ4+xmMaiieHovJKivzKkl7i/fj3J0ikVQDa+6cQJQnNFiQRm2V6
      Nsn/8+IBBEGgIOhie1M5qqZx9EQvAMfOj3A4fACnXcEwTFRNZ1VVPn/06Bpq512or0RLxyhv
      He4io+lIgkD/+CyleV4e2rgCVTN473gPDpvMF7bXsW1V6RKu7lP2tvRy8MyAJYAbgTl2hn37
      ZuY/idhdxdRvKiI13UPLQbi3Og87KuH+HrqGM9SUriXZ38ng0CgZSSOcyqEpN4Aw2s2ptl6m
      UwamISAOTmPu3E5trouhg29zMliKHEmj6mnM3jDiYw9R40wx3nmatv5pZmMqgm2SaAoc62oJ
      LeHXzWjaQpXISzBUxMjcQnh6VmDfRAeCIBCZHJov2Tr3L5FSF3bpHppmejYBfL4AzvVOcq53
      YiEQTTdMBsZnOdk5hixKdA2HcSgyPcPh6xbAoXNDdAyFLQHcCMzULOPj4/OfZJw+/2KBYxej
      JZiNquSs3sDGFaUEpVE+ODaNq2IL25oq8JgROve8Qkv/DGUBB2CnYM1D3F/sg9Q4re/+jhM9
      MUorxjhz8ATjxasozhVITY8z0HYC34paQp/vDX4Jc9UULzN3mAaiGkcQwOu2U5PvRdMN+qMw
      y1wAmQDYFBnTNNF0Y95cubp6NRWFfioK/Kj6nAk0PhMnN+BiRVEQwzApCnlx2CUKQ9fvjbqy
      PJdYMmMJ4EYgVmzn2Wc/uwZIMHrFvezkVtSxsq6CkCLA7AzTcpBVuSF8dgmBEDVVXt4fSaHp
      JuAlN88553ZtD1FVk8uRsSiaNs3ElIK9KEUiATi8FJSUELz6oIKL2L21lhdbZNJJKM33Icsy
      Zfk+og4Tr9fHA88+h4BA0OtgVWUeqqazd+9e3n21n9rSEM3bGnHYJAwTVE2nsihIab7v808M
      bK4vIehxLAhgdDpGrt9JQ0UeqmZQEHIjySIry5ag7M/w2JZqaktClgBuJoJpYuoaqm6gJmeY
      HB8jnJrPUaE4cSlOHMr8aGv3E9T7mZgOU1TkxW3O0tMXw5drR5IEwEDTTFBM1PgIrWen8a/y
      Ikl+QgVBQhseZFOJB1FPEE+k0K+85rwsX9hazcv/IJFOQkWBH1mWqSwMELab+Nx2nn949SX7
      DJfn8S5QX57LNx5uXtq9EgRCPidbrmDaFOfemEQwgiBQnOOlOMdrCeBGYPQd4KWXzs9/knH5
      qtn0aANOuxcPB3nrN6O4FZF0OIEc+GySlnns+TSs8NPScYQ3O46AaWJIRaxeH8Ahi8AoJ958
      hR4dBAxwNLKp0otDKKC6TubgnlcZdNkQFQV/QQW1jTksPTAye7AEcN2UsO3+VYwtuA5LONxu
      bMi4g2U0bUtgH00iOX14az14PW4C2PCUlhJAuaDkqZ38umaaFDeDExEyppOcylqqc5zMJVVw
      EMjPI1cXkO1+SlauoswlIJo+Ktfdi+HqYTKhISguQoWFhK4jTPcb3/gG6XSa+oYGRFHE7/fj
      crn48pe/vOj2tbW1fPvb374j3SesiLA7hDM//Snas8+yxmZbcozCtUSE9fX1UV5eftc7xFm+
      QHcIZTt2UCHfugl7eno6KwJiLBPoDsF/i82Lqqqqu370B2sGsLgMk5OTt7sJtwRLABaLEo1G
      s8IEsgRgsSgrV660TCCL7KWvr+92N+GWYAnAYlFSqZRlAllkL01NTZYJZJGdfOc73+Fv/uZv
      GBgYYHBwkPb2dv7sz/5s0W0PHz7MN7/5TX7yk5/c2kbeIJa5AMY58fsf84MfvsyxgdRCob2Z
      E7/mtcMdjFxz0TwT05z/t/C3JP2tZzh+pJ3Y1Ryh903+07//a35xaoa0frNNBBPTMObbfJNP
      dQGJRIJUKoUxf27DMEheUCbpQnRdJ5FIkMl8rgP4smSZCwDMgkpCmTjR/g4mtbleYJoGpgHX
      3ic0wmNdfPTWUWYW/jYvCMO8iuMZdJ+Lsml3DRN942iasYQ2XAvTHPjRf+Wdrlkyxk090QJp
      9dPSGoZhousG+rwQUhmNtKqh6QapjEYqM+fp+gmabpBWtYXvMqqOYXzym80dK6PqpDMaGU3H
      mB+Mbjaqpn/aXk2/6JzL/02wGKSuNs5YYoregVlyqvwXf28aaJk0aVXHAETZjtMuz/nL6GnS
      2JCNFGnVQJQhGU+QTqeIR6PYJAWbHcDE0DOkE3EEwwRRwW5XkC+qBQbovbRN57Jqaymxk+0M
      qRXU2CQETEwtTVIDDA3dFJAkBUXSUTM6hiAi2+zYFQkMfS7Vu6pjIiLbbNgUCdHUyejMp4JX
      0UUbTluQzf/kW2C3zTnEmQaZVJKMZoAgItkcOBQBPZOau/751Os2ux1FWpr9/uc/fI9IPE0J
      cPDsIIIokk4mmIwk+Pp3f015gZ+tzcX8bl8HhmniUedSoYSjKd441MXeEz0MjM+iawbNK/L5
      xsPN1JXlMBtPc6RtiI/ODNI/GqGuPIevPdRIaa5/sUpMN5T//uZJ3j3WQ0bVuH9dJf/iS5uQ
      5+/P8hcAIJesojbcyeBYP+MljRcVPNJTY5x+93XePtbDTEYkVPcATz11D9VeiczpX/KL9KOs
      mfg1e85Nk9/cxNDe/YypBm8dfJ2cyjXc/8UnKTQSjHWc4lTL7xkYikDheh7d/QAba3K40K1e
      H+phprAMv62S+qL3OTOWYUWVDRGDzKmf8p+Pu3FNnGEoYSdUtppNVRFOHO5gUiigeeduvrSz
      EsL9nPzoPT5s6WGGHOq37WLXtkaK9Vb2nzXJFcY4c/wYY6WP840HC2n7x324vr6bNQEPxLp5
      /+cv8UH3LIYrRO2u53l+vYNz7/0PXjsyRkyT8Zc1sfOx3Wyr8ixpes+o6uKjsmmip+MMjaTY
      E4uQjCcAEzUeQQYGJ2aZONFD99D0grl2unuMwYkK6spy6B+PsOd4L+cHptB0g/C5JOtqCikM
      erGJS4zeuUpOd4+TnI9z3neil3/+xEY+KZ5wRwgA3FQ3FtJ7KsLwUISyhd9HZ/zwO5yQ1/G1
      //0PKXWl6dv/U369t5zvPFGJqatMt+3nbOEDfPvP6gnIKtPrmzh3IkzjY5vmy6cm6JtIYzqL
      2PDAczxfKNL13mHCs+NEybkgklVjoH2M/LJmbHaFsrpcXj07SqaiGkkEEwmCq/nq88/gTY1y
      9LXfMOB5kn/6r55D7e2krb2Xcd1Psm+QGaWZp/+X3Ti0MU60jNPfnUNOBejTbRyZ9LNu95/w
      dEUIhzRF28L5U7S+8gpDzc/z775diqwnmY7riDYbJasf5/kNPuxCktH+fobPnWe2av2S4gGE
      y/ma6mlsw/tRZBHDrmBLzNn8oqlhAIok4nIo2GSJjKZjmmBXZBRpToaKJOF2KDhsMsm0itOu
      YLNJN330B7Db5IVCHy6H7aKIzztEACDm1VJr/4DOsUEcuo4pA0Tp73Wx6uEK8n02RMFG1b3b
      CP1tF2GzAp8oIxZt5ZlHS7hi1SBbiOKKAqrL/NgBv99NxvmZbdQh2rsF5LwJxkfTKLYQtnNn
      GH6oimqHgCiJlNWvIs8Jmu6huKwCeWUlARtE7B687jGIzTDVe4p9xyY4fPSTUaF4hDsAABGQ
      SURBVK+Q9WW1pIGMUMKm+xtpqAyiXNIxejkzuJJHvlqCXRJAcpFnM1AT04x3HOP9U32E4xky
      aRt5VZtphCUJoLI4SGS+07qdCoIgIpkKst1F0davUpLrYV1dAe8c7p0rfzo7QM/RNyjN97N1
      cy1Br4vhqSi6blBflkNl0Vwrygv87N5aS2HIw9BElBUlAVZV5iJJN38ZuqOpDFEQyGga21aV
      IYmf3tw7RgDgpLyhhHOHJxiNhVFLACQcDp2pWIqMZmCXDFIzEVSnEwUQRJG8ks90ftPAUDNk
      dBPzGu69OtzJQGqEid/3cWR+Pz0Kp0cfZUXl1QV9I4rYC2rZ8aUvsWtdMQ7JRM+o6KKIHG/F
      mZNDwOVcpPMDuPF7EoRjKkU+G4JpoOppEolezvQW8MSfPEuxI8Xg2TO0ticWO8BV8X9+bRt/
      /N4LAKytKUSSJGKxGPu8Tv72Tx9Z2O6BddUAHDx4kP909A08ToXtTaVsb1o8pNHlUFhfV8T6
      uitWLbwpPLFjJU/sWLnod3eQAEDMWcmaYD/7eyeIBA3AS1WTh9ZzrZyJRwjaMky2n8ex4QkC
      grBIZgYByTTQZvs4czZIpd9PKO8yIYoXoTLcNUbe9qd5urmckGNOAdET/4MXTo+gVVRe3QW4
      gwQdAr1tRzgs1VHgElCjKo6SYko+N4KrhNWr4uw9eBLKfUiCgerModJnw+nKMNnfyaweY6Rn
      kOn056cgsZhjmQvAhs/nRRA+CRxUKFlVR+HoNE6PHbsMvob72B7bx76j+4hkJEK1O/nixlwQ
      QPSWUHzRFcq4/HmUlCvs/2gvQ4X1bL53ByGPF58kLdwMeyCA1+2+YAGcJqXU0lQZxGP/dNrw
      rtrOyr4oKQGcF5xLkBRcOQUE5g8gO514c3JwSAFCdY0kE4c4fHgvpw0b/uJ6NpZUoihecgIy
      DvuF05KNUHkRdllGQKLs3idY+8ZrfLgnguEMULFpN42FFawqO8c777+H7C+ktKSCmhwbn7Xg
      roXm5mYURcHpdC7UCGtsbFx020AgwLp16ygvL7+OM94+rJDILOJaQiK7u7uzIihm2b8Is7g9
      BALZkVPCEoDFovT19VneoBbZS15e3l1v/oAlAIvLoChLTC13h2EJwGJRhoeHLRPIInspLi62
      TCCL7OVO9e+/ViwBWCzK5ORkVphAy/xNsMXt4Ec/+hEApaWlC2+CAWZnZ/n444/52te+dsX9
      P/74Yw4fPsz999/P6tWXplNfTixvAZgqM/2ttBw/QddECsGdR3XzBtbVluB33igf8jQTA6PM
      piSKa0s/34Vg/Di/29NNaNvjbC13o9yFc+ihQ4coKSkhHo8jSZ/e5+npaVpaWj5XAH19fezf
      v5+6urplL4Bl/fNlxrto6xogGWpg07ZtrK/LIT49xWx08fjUz0cjGh7m7NHzF8T/6iSis8xM
      x9CusOcnjLb1IHqinO2cRNNudpziLGde+x1HhmKotygkMttY1jNAbDpMWrBT3riWVTkyppqk
      MqHjdF7Ru/8KmKjpBOHJCMVL2n+U9iE3NTsrSe/pZlIvogTbTRxFnJSu24AedLDECMdr5ge/
      ayE+X+TuTM84TruNurIcDNMkmVYZmYrx3Z/sY01NAU/uqL9o31RGZ9/JPvadmEuqFU2kSaQy
      c0Eoy5RlLQCX30W6tYvTx07j21hPcdBFcMFFJc3E2QPs2X+SgRkVV9kGHnnsHlYE7Uhdr/OT
      ya18c2sOGBlmR1p4p9XHvaV9/OKljxmJa7x/Yg+h0ga2P/QwQTPNVO9p3uzYy+BwFLl0Hbvu
      20pDiZeLDK3JHoa9xTT4qqh3/5ru8BaKHPMhke2v8YtWBXP4LCNJB3nV61lfNM7xI51My0U0
      b3+QB9cUQmyU9mP7+ailh4iQy6qtO9m6tpoctYujPTL58jhnjh1jJO8+nryngIGPW3E8EsIv
      yIj6JMde/jV7O8IYziDV9zzNk402uj5+mXePjxLVFYJljWx7cBer85fW6c50jy7UCY7E0iTS
      OgC6bjAxkyCZVmnpGEUQhEsEMDYdo+X8CGPhGBJwfnCaDdNxVhRbAlgS9vxaNmySOHXsKK+8
      8A5G3mrufWAbq8oCCENH2XsuRenmx9kWshHrPcg777fx9S804k9MMhyZf4xnGujpCOMzHgLb
      N/DwF32cb5+l+p4mgjYn3gBMjcZIqBJ5jQ+wcYfJQEsvMxNjREu8F0VVTXT04yndicPuobra
      xofnw2zLd4JoYsSn6I/V89TuL2NPTdF24ACt/h3seGI16ZFRxga7GF/tRh8eY5ZqHnx6C4o+
      TWf3OEP9Pnx5CWYGOzk7IlHRdB8PV1fgdyY4NzaNruuY6PS9+2uOOzfyzNfykVBJSDJIdvxl
      63mkyo9DzDA1Ps50azfx/PolVao3DIML820YFzwJ0jQDQY0i9b3D+VGFPz/9ykX7ZlSdcCyF
      mJgzMFPpuewPy5llLQBBdhIsXsnWYBnNWyOMd5+k5eQZnPJaXF2DeFeso25lNXlOAb0Aev/b
      MQb1lSxak1CQUFwB8grzmRhVKCotXYgJnlICFFYGqW2qISiDNDzNpE3lYrN7go5OO0UPOLDZ
      BOz1Dbh/fJ6p7QUUigKiKFG6ah11FXbMuBetvJux+kaqi2SipkAm1oMWnWL47H5e+WgA0aEg
      opFM5rH5qRzK8iCV9lK7sYHmlYW4bRKicOFap4cjZ/K49581UeG2IWCiGyailiQz1c7b+84x
      Hk2TyTgpqt9JzX1LE4DT4bzoBZhdmZsDRVEkJ+ACxY1Ufg9rG0r4+kMXF8RLpjXeOtzFe3ve
      gnAX1cUBCoJLacWtY1kLAAREScHp8eNwewmG7MQ+7EJPxUmoOrJNQZHnAqtlhwu7rqGZS8gX
      JEgoijKXngSQRBHxszb3ZDdt/cdp+7sDvCSJCKZKPFZISfgeCvMkEECxO5BF0ARx7nh2G5LA
      XFytCOgqUs4Ktj77RXbWflLrVsbuduJMtuLMLaIoPwePTV4kWNzEEOx4nAqiIAACsqQyO9PJ
      8XMedn3jX1Dk1Jns6aa7K8lSx92/+qPt/HnLzwHYVF+88BRIFMDrslFWEOTf/OvnsNtkPM6L
      TRvDNPnDwkIcqUHeeK2L/JAHv3up67Vbw7IWwFRvG8MzCUIrmihwC6RHOuiYStBQKbOyIsSB
      Y10UBEN4Ch1EzuzjZKCcPxQlRFFCnY2hmgbazCCnDpxiyjkfsaSmSE6NMJbU8Nu56oxrE53n
      cWz7Cn/aVE6Oa27ZGzn4Ar9qnWFX3lXWrfX4cZhpEj3dhFfuoMprEB0aZUZXQQFBkpAE4TKZ
      EipoKn6Zt46s5xubCpG1BJOxBDYjQ0YJUpIXxJEcZmZskMnU0uvoBjyOhfPbFGlBAIIgIAoC
      siSS4188flMUBNwOBZddWfgsXjKSLC+WtQBcHhvRE+/z2kv/k9Goiauokfsef5Sa8hAuaScP
      Tr3F7/7hP/LClIpnxXae+soagnYZVt7Ppre+z//xnQyO/GqamooJ6AAybm8Qn9LKT/5iD64V
      m3nsmaco+NyWhOkdCLJySz75eV6c8z3Efc82nP9wlvDOnVxVBVs5j7rGVYRHX+eF//AyUcNO
      btVmHtl9H7m5n7ezQv1TX2X0hf/K//XTKXR3Hqse+zbf2lhBte0FvvuvXkTJq6SmqobC5T3o
      LiuWdUjk5ZsmIAiXy5cpzGVqW+yb+dwwl0WYy4qzsI3wSZacC891wQhtfvY8c999eo7PfJ77
      cPnzX9BOPnteQZgrvP25e198LRdytSGRpmnS0tLC2rVrF3WI+zwnuQvv8XJ3qFvWM8CVb97l
      TIX575Z0zMttc5lzLdLJFtv/os/X1CE+c97LnO9GIwgC8nxFyqV04OXe6S9kWb8Jtrh9NDQ0
      3FEdealYArBYlDNnzljeoLquZ41feDagaRqiKF421/+FmKZJKpW662eBKy6CY7EY/f39t7I9
      FjeRTCaDKIoL9v2VMAzjIlfou5Vl/RTI4sZyLYmxEokETqfzrp8B7n6JW1hcAUsAFlmNJQCL
      rMYSgMWiXM1C+W4gO67S4pqx2ZZvEMuNxJoBLLIaSwAWWY0lAIusxhKARVZjLYKzHHWmi+OH
      ztA7lcSWv4pt2xvIdyqIAgwePAjbtlEKmFqayNBpTs1WcE9zHje3tPVNwEgx0XGcI2f6CadM
      7IFKNt6/xZoBshptgjOHzjCmuykqK8I13cLeUyOk59OiTLW3Mw1g6qRn+zh2cADJ77glMQk3
      mljHxxzsiuEoKKOqqowQvXzwfoc1A2Qz2kgbXWouq9atprbQQWZc5jevdzLRXECp8kntYxNd
      jdF37DiJqh1sLfPekaOmHCincY2fwvwALlkgGT7NK78dviOvxeIGkZiaxVVURG7AjSIpuAtX
      UytPMm0YC6GYpqET7f6Io8lqNq8uwX0nDv+APb+KFcUh3IoEmKRGe1GLyqwZIJvJpAXcPgVZ
      nh8HBQ9e5xRjUR3TDabZxqvf/y94hVw2fu0B8p13aO/ngjBNbYZze96i27+a+7aWWzNANiNK
      c8m1PnWINzENNy6nAAIglLD5C4+zszrF2fbJa8+3tMzQE53sefkj4hVb2NxYQ1noZuZ1tVj2
      uFwwNZ0glZ7Pi60P0R/24VfEuf6Pl6LaWhq330f1wNu815O6re29LvRBPnyjl4JNm2isLqfA
      qyBgvQfIauzl1bj6ztI5OEE8E2fo472cz6ukUFI+zYwnCNiDFWzYuY70B2/TfodqIH7mEJNl
      TVQV5+GSP+321hogixHc1WzfOs6bv/8J3/tZAqV8C088WYPXLl3wqFNAEBT8RTWsWT3EnleO
      kvfMRkJ32IuAkZ5zHDt0hGO/FedTzYjYXRutkMhsYrGQSFPPkEqlUXUTQbbjdNgW0jOqySQ4
      nSjMBcmbeoaUKuBw2C7NnbrM0VIxkhnj4nWMoFgzQLYjSDacbtuipaEU56d/FQQBQbbjukN7
      jOzw4F0kZaS1BrDIaiwBWGQ1lgAsshpLABZZjSUAi6zGEoBFVmMJwCKrsQRgkdVYArDIaiwB
      WGQ1lgAsshpLABZZzR3q2mSRPRgkZ0ZoO7yPHqOE+rXbWFV44/KWWjOAxfLGSDHV28JbP/kl
      v9vzJm+eHEP7nF0mzr3H3uPnmYx/umW0/V1efL2FiYx+kUu0JQCLZY2ZjjI9MsB0/k7urc8h
      3N7JlHHlfcZP/p43D51jIvqpAExDR9MN+Exks2UCWSxjTDKxCCOD/dg27WZN8BzD+87ROXkf
      BfkiaDGG2ls4fPQsg7M6nupmKvVxTn7cRedsmp+Hu8hp3MU3HmhC0dIknW68gknvuz/kQ88z
      /OHWfGsGsFjOqMxGBujtSFBV30hBQR4uuY+2rjCQYaztI958633OR2RCuTk4ZAm724ff48Dh
      8ZGbX0hh0I0iCcQ69vLLgz1kNBN5soWf/eoIE5jWDGCxjFETzA520x2t4InqIKGZEgr8Iuc7
      e4hsLqXnVBdTmXJ2fOVpthQ5UVUNWVbwj71N28wmHv6Dx2gonAsDiy0cVKB45+PU/Ow9jo0/
      ZgnAYvmSiUfpP3mAE91p4t/7t7yenmGobwy5sZWe6RziMXB5iyjK9yJLIEtX153Font4sPoF
      3vt40BKAxXJFIxkboXcgwdqnv8VjdTZAZbz9CCf7uukauY/qPJhuOcvZ9rWU1AdIJtPY7XYU
      m43EzAzRVAZVV5A/W/BbyGXbgw389z0fWwKwWKboaeLj3fSGm3joqYfYlS8BOpFimchv99Ld
      M8t9W3ewKfImH7zwH3hbk/A0PsTX/+A+qpu3U3nsbf7hrw/j3PAc//rZLRcdWkAgtOURVv3o
      h1ZalGziWirF33ZMjdTsJEMjGnm1pfjm8xDpqQgTE2HS9hxKcu2kpscZGZ0kmjFRAoWUF+Xh
      lxKMDA4xHkli+EqpL8tBjPTQFg/RWBZAlgQMI87Q2fOWALKJO0oAtwjrMahFVmMJwCKrsQRg
      kdVYArDIaiwBWGQ1/z9mE6Y9+GS9+wAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='COVID Cases Across Continents' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Dashboard 1' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAAA7DAAAOwwHHb6hk
      AAACFUlEQVR4nO3TMQEAIAzAMMC/5yFjRxMFfXpnZg5Eve0A2GQA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQD
      kGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBp
      BiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA
      0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDN
      AKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxA
      mgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZ
      gDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFI
      MwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKQZgDQDkGYA0gxAmgFIMwBpBiDNAKR9Y+0F
      fBUOM1sAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Europe Sum New Cases' width='192'>
      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
      HklJ7P8HRgWBTfhzntgAAAAASUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Forecast of New Cases of Germany, France, Italy' width='192'>
      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
      /wOxlXzDHHlAqgAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='New Deaths and Recovered cases in Germany, France and Italy' width='192'>
      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
      f4EWPxQrbRCoAAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='New Recovered of Vietnam vs Thailand' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='SEA New Case Percentage' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='Stacked Area Chart by Continents' width='192'>
      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
      RK5CYII=
    </thumbnail>
  </thumbnails>
</workbook>
