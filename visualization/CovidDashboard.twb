<?xml version='1.0' encoding='utf-8' ?>

<!-- build 20221.22.0324.2209                               -->
<workbook original-version='18.1' source-build='2022.1.0 (20221.22.0324.2209)' source-platform='win' version='18.1' xmlns:user='http://www.tableausoftware.com/xml/user'>
  <document-format-change-manifest>
    <_.fcp.AnimationOnByDefault.true...AnimationOnByDefault />
    <MapboxVectorStylesAndLayers />
    <_.fcp.MarkAnimation.true...MarkAnimation />
    <_.fcp.ObjectModelEncapsulateLegacy.true...ObjectModelEncapsulateLegacy />
    <_.fcp.ObjectModelTableType.true...ObjectModelTableType />
    <_.fcp.SchemaViewerObjectModel.true...SchemaViewerObjectModel />
    <SheetIdentifierTracking />
    <SortTagCleanup />
    <WindowsPersistSimpleIdentifiers />
  </document-format-change-manifest>
  <preferences>
    <preference name='ui.encoding.shelf.height' value='24' />
    <preference name='ui.shelf.height' value='26' />
  </preferences>
  <_.fcp.AnimationOnByDefault.false...style>
    <_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule element='animation'>
      <_.fcp.AnimationOnByDefault.false...format attr='animation-on' value='ao-on' />
    </_.fcp.AnimationOnByDefault.false..._.fcp.MarkAnimation.true...style-rule>
  </_.fcp.AnimationOnByDefault.false...style>
  <datasources>
    <datasource caption='preprocess_data' inline='true' name='federated.025vu620m6pvu71axal7z0iapj1l' version='18.1'>
      <connection class='federated'>
        <named-connections>
          <named-connection caption='preprocess_data' name='textscan.06vo60t0cih8cy10th2kj1e9dx1e'>
            <connection class='textscan' directory='D:/Data Visualization/Lab02_19120068/data' filename='preprocess_data.csv' password='' server='' />
          </named-connection>
        </named-connections>
        <_.fcp.ObjectModelEncapsulateLegacy.false...relation connection='textscan.06vo60t0cih8cy10th2kj1e9dx1e' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Total Cases' ordinal='2' />
            <column datatype='real' name='New Cases' ordinal='3' />
            <column datatype='real' name='Total Deaths' ordinal='4' />
            <column datatype='real' name='New Deaths' ordinal='5' />
            <column datatype='real' name='Total Recovered' ordinal='6' />
            <column datatype='real' name='New Recovered' ordinal='7' />
            <column datatype='real' name='Active Cases' ordinal='8' />
            <column datatype='real' name='Serious, Critical' ordinal='9' />
            <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
            <column datatype='real' name='Deaths/1M pop' ordinal='11' />
            <column datatype='real' name='Total Tests' ordinal='12' />
            <column datatype='real' name='Tests/1M pop' ordinal='13' />
            <column datatype='real' name='Population' ordinal='14' />
            <column datatype='string' name='Continent' ordinal='15' />
            <column datatype='real' name='1 Case every X ppl' ordinal='16' />
            <column datatype='real' name='1 Death every X ppl' ordinal='17' />
            <column datatype='real' name='1 Test every X ppl' ordinal='18' />
            <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
            <column datatype='date' name='Date' ordinal='20' />
            <column datatype='string' name='Country Code' ordinal='21' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.false...relation>
        <_.fcp.ObjectModelEncapsulateLegacy.true...relation connection='textscan.06vo60t0cih8cy10th2kj1e9dx1e' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
          <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
            <column datatype='integer' name='F1' ordinal='0' />
            <column datatype='string' name='Country' ordinal='1' />
            <column datatype='real' name='Total Cases' ordinal='2' />
            <column datatype='real' name='New Cases' ordinal='3' />
            <column datatype='real' name='Total Deaths' ordinal='4' />
            <column datatype='real' name='New Deaths' ordinal='5' />
            <column datatype='real' name='Total Recovered' ordinal='6' />
            <column datatype='real' name='New Recovered' ordinal='7' />
            <column datatype='real' name='Active Cases' ordinal='8' />
            <column datatype='real' name='Serious, Critical' ordinal='9' />
            <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
            <column datatype='real' name='Deaths/1M pop' ordinal='11' />
            <column datatype='real' name='Total Tests' ordinal='12' />
            <column datatype='real' name='Tests/1M pop' ordinal='13' />
            <column datatype='real' name='Population' ordinal='14' />
            <column datatype='string' name='Continent' ordinal='15' />
            <column datatype='real' name='1 Case every X ppl' ordinal='16' />
            <column datatype='real' name='1 Death every X ppl' ordinal='17' />
            <column datatype='real' name='1 Test every X ppl' ordinal='18' />
            <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
            <column datatype='date' name='Date' ordinal='20' />
            <column datatype='string' name='Country Code' ordinal='21' />
          </columns>
        </_.fcp.ObjectModelEncapsulateLegacy.true...relation>
        <metadata-records>
          <metadata-record class='capability'>
            <remote-name />
            <remote-type>0</remote-type>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias />
            <aggregation>Count</aggregation>
            <contains-null>true</contains-null>
            <attributes>
              <attribute datatype='string' name='character-set'>&quot;UTF-8&quot;</attribute>
              <attribute datatype='string' name='collation'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='field-delimiter'>&quot;,&quot;</attribute>
              <attribute datatype='string' name='header-row'>&quot;true&quot;</attribute>
              <attribute datatype='string' name='locale'>&quot;en_US&quot;</attribute>
              <attribute datatype='string' name='single-char'>&quot;&quot;</attribute>
            </attributes>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>F1</remote-name>
            <remote-type>20</remote-type>
            <local-name>[F1]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>F1</remote-alias>
            <ordinal>0</ordinal>
            <local-type>integer</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Country</remote-alias>
            <ordinal>1</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Cases</remote-alias>
            <ordinal>2</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Cases</remote-alias>
            <ordinal>3</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Deaths]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Deaths</remote-alias>
            <ordinal>4</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Deaths</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Deaths]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Deaths</remote-alias>
            <ordinal>5</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Recovered]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Recovered</remote-alias>
            <ordinal>6</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>New Recovered</remote-name>
            <remote-type>5</remote-type>
            <local-name>[New Recovered]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>New Recovered</remote-alias>
            <ordinal>7</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Active Cases</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Active Cases]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Active Cases</remote-alias>
            <ordinal>8</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Serious, Critical</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Serious, Critical]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Serious, Critical</remote-alias>
            <ordinal>9</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Cases/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Cases/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Cases/1M pop</remote-alias>
            <ordinal>10</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Deaths/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Deaths/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Deaths/1M pop</remote-alias>
            <ordinal>11</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Total Tests</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Total Tests]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Total Tests</remote-alias>
            <ordinal>12</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Tests/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Tests/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Tests/1M pop</remote-alias>
            <ordinal>13</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Population</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Population]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Population</remote-alias>
            <ordinal>14</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Continent</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Continent]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Continent</remote-alias>
            <ordinal>15</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Case every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Case every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Case every X ppl</remote-alias>
            <ordinal>16</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Death every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Death every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Death every X ppl</remote-alias>
            <ordinal>17</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>1 Test every X ppl</remote-name>
            <remote-type>5</remote-type>
            <local-name>[1 Test every X ppl]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>1 Test every X ppl</remote-alias>
            <ordinal>18</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Active Cases/1M pop</remote-name>
            <remote-type>5</remote-type>
            <local-name>[Active Cases/1M pop]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Active Cases/1M pop</remote-alias>
            <ordinal>19</ordinal>
            <local-type>real</local-type>
            <aggregation>Sum</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Date</remote-name>
            <remote-type>133</remote-type>
            <local-name>[Date]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Date</remote-alias>
            <ordinal>20</ordinal>
            <local-type>date</local-type>
            <aggregation>Year</aggregation>
            <contains-null>true</contains-null>
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
          <metadata-record class='column'>
            <remote-name>Country Code</remote-name>
            <remote-type>129</remote-type>
            <local-name>[Country Code]</local-name>
            <parent-name>[preprocess_data.csv]</parent-name>
            <remote-alias>Country Code</remote-alias>
            <ordinal>21</ordinal>
            <local-type>string</local-type>
            <aggregation>Count</aggregation>
            <scale>1</scale>
            <width>1073741823</width>
            <contains-null>true</contains-null>
            <collation flag='0' name='LEN_RUS' />
            <_.fcp.ObjectModelEncapsulateLegacy.true...object-id>[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]</_.fcp.ObjectModelEncapsulateLegacy.true...object-id>
          </metadata-record>
        </metadata-records>
      </connection>
      <aliases enabled='yes' />
      <column caption='Death Rate' datatype='real' name='[Calculation_1050746126646198279]' role='measure' type='quantitative'>
        <calculation class='tableau' formula='SUM([Total Deaths])/sum([Total Cases])' />
      </column>
      <column caption='Top TotalCases and Other' datatype='string' name='[Calculation_1560778784028012547]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Country Set] THEN [Country] ELSE &apos;Other&apos; END' />
      </column>
      <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
      <column datatype='integer' hidden='true' name='[F1]' role='measure' type='quantitative' />
      <column caption='Top TotCases/1M pop and Other' datatype='string' name='[Top and Other (copy)_1560778784030695428]' role='dimension' type='nominal'>
        <calculation class='tableau' formula='IF [Top 3 Country (copy)] THEN [Country] ELSE &apos;Other&apos; END' />
      </column>
      <column datatype='real' name='[Total Cases/1M pop]' role='measure' type='quantitative' />
      <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
      <column datatype='string' name='[Vietnam vs Others]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
        <calculation class='categorical-bin' column='[Country]' default='&quot;Other&quot;' new-bin='true'>
          <bin default-name='true' value='&quot;Vietnam&quot;'>
            <value>&quot;Vietnam&quot;</value>
          </bin>
        </calculation>
      </column>
      <_.fcp.ObjectModelTableType.true...column caption='preprocess_data.csv' datatype='table' name='[__tableau_internal_object_id__].[preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF]' role='measure' type='quantitative' />
      <column-instance column='[Country]' derivation='Attribute' name='[attr:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Calculation_1560778784028012547]' derivation='None' name='[none:Calculation_1560778784028012547:nk]' pivot='key' type='nominal' />
      <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
      <column-instance column='[Top and Other (copy)_1560778784030695428]' derivation='None' name='[none:Top and Other (copy)_1560778784030695428:nk]' pivot='key' type='nominal' />
      <group caption='Top 3 TotalCases' name='[Country Set]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='3' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Total Cases])' function='order' user:ui-marker='order'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </groupfilter>
        </groupfilter>
      </group>
      <group caption='Top 3 TotCases/1M pop' name='[Top 3 Country (copy)]' name-style='unqualified' user:ui-builder='filter-group'>
        <groupfilter count='3' end='top' function='end' units='records' user:ui-marker='end' user:ui-top-by-field='true'>
          <groupfilter direction='DESC' expression='SUM([Total Cases/1M pop])' function='order' user:ui-marker='order'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </groupfilter>
        </groupfilter>
      </group>
      <layout _.fcp.SchemaViewerObjectModel.false...dim-percentage='0.5' _.fcp.SchemaViewerObjectModel.false...measure-percentage='0.4' dim-ordering='alphabetic' measure-ordering='alphabetic' show-structure='true' />
      <style>
        <style-rule element='mark'>
          <encoding attr='color' field='[Country Set]' type='palette'>
            <map to='#76b7b2'>
              <bucket>(&quot;Singapore&quot;)</bucket>
            </map>
            <map to='#e15759'>
              <bucket>(&quot;Malaysia&quot;)</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>(&quot;Brunei&quot;)</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[attr:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>%many-values%</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks and Caicos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;St. Vincent Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DPRK&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MS Zaandam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;CAR&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Pierre Miquelon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DRC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Barth&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;S. Korea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[Vietnam vs Others]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#a2a2a2'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Calculation_1560778784028012547:nk]' type='palette'>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#76b7b2'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Top and Other (copy)_1560778784030695428:nk]' type='palette'>
            <map to='#76b7b2'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Other&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
          </encoding>
          <encoding attr='color' field='[none:Country:nk]' type='palette'>
            <map to='#499894'>
              <bucket>&quot;Bulgaria&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Croatia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Faeroe Islands&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Guyana&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Kiribati&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Martinique&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;New Zealand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Romania&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Slovenia&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Thailand&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Tonga&quot;</bucket>
            </map>
            <map to='#499894'>
              <bucket>&quot;Zimbabwe&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Benin&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Brunei&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Channel Islands&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Ecuador&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Gibraltar&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Israel&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Macao&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Mozambique&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Papua New Guinea&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Saudi Arabia&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Switzerland&quot;</bucket>
            </map>
            <map to='#4e79a7'>
              <bucket>&quot;Vanuatu&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Bosnia and Herzegovina&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Comoros&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Eritrea&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Guadeloupe&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Japan&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Malaysia&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Maldives&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Nauru&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Poland&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Sierra Leone&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Tanzania&quot;</bucket>
            </map>
            <map to='#59a14f'>
              <bucket>&quot;Wallis and Futuna&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Albania&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Azerbaijan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Cabo Verde&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Czechia&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;France&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Hungary&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Mexico&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Niue&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Saint Helena&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;South Sudan&quot;</bucket>
            </map>
            <map to='#79706e'>
              <bucket>&quot;Turks and Caicos&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Aruba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Cuba&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Falkland Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Haiti&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Kuwait&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Mauritania&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Nicaragua&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Russia&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Solomon Islands&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Timor-Leste&quot;</bucket>
            </map>
            <map to='#86bcb6'>
              <bucket>&quot;Trinidad and Tobago&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Botswana&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Congo&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Estonia&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Guatemala&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Jordan&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Mali&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Myanmar&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Nepal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Portugal&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;St. Vincent Grenadines&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Uruguay&quot;</bucket>
            </map>
            <map to='#8cd17d'>
              <bucket>&quot;Western Sahara&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Argentina&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Belgium&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Cayman Islands&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;DPRK&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Germany&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Ireland&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Lithuania&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Montserrat&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Palestine&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;San Marino&quot;</bucket>
            </map>
            <map to='#9d7660'>
              <bucket>&quot;Suriname&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Bermuda&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Cambodia&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Chile&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Egypt&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Greece&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Italy&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Madagascar&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;MS Zaandam&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Paraguay&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Senegal&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Syria&quot;</bucket>
            </map>
            <map to='#a0cbe8'>
              <bucket>&quot;Vatican City&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Anguilla&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Barbados&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;CAR&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Dominica&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Gambia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Iran&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Libya&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Mongolia&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Pakistan&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Saint Pierre Miquelon&quot;</bucket>
            </map>
            <map to='#b07aa1'>
              <bucket>&quot;Ukraine&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Brazil&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Cook Islands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Eswatini&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Guinea&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Kazakhstan&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Malta&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Netherlands&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Philippines&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Qatar&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Sint Maarten&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;USA&quot;</bucket>
            </map>
            <map to='#b6992d'>
              <bucket>&quot;Yemen&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Algeria&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Bahamas&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Curaçao&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Denmark&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;French Guiana&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Iceland&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Lebanon&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;North Macedonia&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Saint Kitts and Nevis&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;Spain&quot;</bucket>
            </map>
            <map to='#bab0ac'>
              <bucket>&quot;UAE&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Andorra&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Bahrain&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Cameroon&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Diamond Princess&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;French Polynesia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;India&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Lesotho&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Moldova&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Saint Lucia&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Sri Lanka&quot;</bucket>
            </map>
            <map to='#d37295'>
              <bucket>&quot;Uganda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Antigua and Barbuda&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Belarus&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Caribbean Netherlands&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Dominican Republic&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Georgia&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Iraq&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Liechtenstein&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Montenegro&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Palau&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Samoa&quot;</bucket>
            </map>
            <map to='#d4a6c8'>
              <bucket>&quot;Sudan&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Armenia&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Belize&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Chad&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;DRC&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Ghana&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Isle of Man&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Luxembourg&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Morocco&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Panama&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sao Tome and Principe&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Sweden&quot;</bucket>
            </map>
            <map to='#d7b5a6'>
              <bucket>&quot;Uzbekistan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Australia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Burkina Faso&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Fiji&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Honduras&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Kyrgyzstan&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Mauritius&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Niger&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Rwanda&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Somalia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Tunisia&quot;</bucket>
            </map>
            <map to='#e15759'>
              <bucket>&quot;Vietnam&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;British Virgin Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Costa Rica&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Ethiopia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Guinea-Bissau&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Kenya&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Marshall Islands&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;New Caledonia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Réunion&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Singapore&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Slovakia&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Togo&quot;</bucket>
            </map>
            <map to='#f1ce63'>
              <bucket>&quot;Zambia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Bhutan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;China&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;El Salvador&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Greenland&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Indonesia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Ivory Coast&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Malawi&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Norway&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Peru&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Serbia&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Taiwan&quot;</bucket>
            </map>
            <map to='#f28e2b'>
              <bucket>&quot;Venezuela&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Angola&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Bangladesh&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Canada&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Djibouti&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Gabon&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Latvia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Liberia&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Monaco&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;Oman&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;St. Barth&quot;</bucket>
            </map>
            <map to='#fabfd2'>
              <bucket>&quot;UK&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Afghanistan&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Austria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Burundi&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Cyprus&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Finland&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Hong Kong&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Mayotte&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Nigeria&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;S. Korea&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;South Africa&quot;</bucket>
            </map>
            <map to='#ff9d9a'>
              <bucket>&quot;Turkey&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Bolivia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Colombia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Equatorial Guinea&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Grenada&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Jamaica&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Laos&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Micronesia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Namibia&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Saint Martin&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Seychelles&quot;</bucket>
            </map>
            <map to='#ffbe7d'>
              <bucket>&quot;Tajikistan&quot;</bucket>
            </map>
          </encoding>
        </style-rule>
      </style>
      <semantic-values>
        <semantic-value key='[Country].[Name]' value='&quot;United States&quot;' />
      </semantic-values>
      <_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
        <objects>
          <object caption='preprocess_data.csv' id='preprocess_data.csv_89D9C18DF84D4B0999CD0A268DA414FF'>
            <properties context=''>
              <relation connection='textscan.06vo60t0cih8cy10th2kj1e9dx1e' name='preprocess_data.csv' table='[preprocess_data#csv]' type='table'>
                <columns character-set='UTF-8' header='yes' locale='en_US' separator=','>
                  <column datatype='integer' name='F1' ordinal='0' />
                  <column datatype='string' name='Country' ordinal='1' />
                  <column datatype='real' name='Total Cases' ordinal='2' />
                  <column datatype='real' name='New Cases' ordinal='3' />
                  <column datatype='real' name='Total Deaths' ordinal='4' />
                  <column datatype='real' name='New Deaths' ordinal='5' />
                  <column datatype='real' name='Total Recovered' ordinal='6' />
                  <column datatype='real' name='New Recovered' ordinal='7' />
                  <column datatype='real' name='Active Cases' ordinal='8' />
                  <column datatype='real' name='Serious, Critical' ordinal='9' />
                  <column datatype='real' name='Total Cases/1M pop' ordinal='10' />
                  <column datatype='real' name='Deaths/1M pop' ordinal='11' />
                  <column datatype='real' name='Total Tests' ordinal='12' />
                  <column datatype='real' name='Tests/1M pop' ordinal='13' />
                  <column datatype='real' name='Population' ordinal='14' />
                  <column datatype='string' name='Continent' ordinal='15' />
                  <column datatype='real' name='1 Case every X ppl' ordinal='16' />
                  <column datatype='real' name='1 Death every X ppl' ordinal='17' />
                  <column datatype='real' name='1 Test every X ppl' ordinal='18' />
                  <column datatype='real' name='Active Cases/1M pop' ordinal='19' />
                  <column datatype='date' name='Date' ordinal='20' />
                  <column datatype='string' name='Country Code' ordinal='21' />
                </columns>
              </relation>
            </properties>
          </object>
        </objects>
      </_.fcp.ObjectModelEncapsulateLegacy.true...object-graph>
    </datasource>
  </datasources>
  <mapsources>
    <mapsource name='Tableau' />
  </mapsources>
  <actions>
    <action caption='Highlight 1 (generated) 1' name='[Action2_38CC10066AC24A209197FFA5DA97DBF6]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Pie - SEA Top 3 TotCase' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Top TotalCases and Other' />
        <param name='target' value='Pie - SEA Top 3 TotCase' />
      </command>
    </action>
    <action caption='Highlight 1 (generated)' name='[Action2_7FD18723CB0B4DFA9B382CD9C44072C2]'>
      <activation auto-clear='true' type='on-select' />
      <source type='sheet' worksheet='Pie - SEA Top 3 TotCase/1M pop' />
      <command command='tsc:brush'>
        <param name='field-captions' value='Top TotCases/1M pop and Other' />
        <param name='target' value='Pie - SEA Top 3 TotCase/1M pop' />
      </command>
    </action>
  </actions>
  <worksheets>
    <worksheet name='Line - SA TotCases/1M pop'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Total Cases/1M pop]' role='measure' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Date]' derivation='None' name='[none:Date:ok]' pivot='key' type='ordinal' />
            <column-instance column='[Total Cases/1M pop]' derivation='Sum' name='[sum:Total Cases/1M pop:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]'>
            <groupfilter function='member' level='[none:Continent:nk]' member='&quot;South America&quot;' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate' />
          </filter>
          <slices>
            <column>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style />
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases/1M pop:qk]</rows>
        <cols>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Date:ok]</cols>
      </table>
      <simple-id uuid='{13ED18AE-931D-4AC0-937D-C6258666F546}' />
    </worksheet>
    <worksheet name='Linear Model for Test vs Death'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column caption='Death Rate' datatype='real' name='[Calculation_1050746126646198279]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Total Deaths])/sum([Total Cases])' />
            </column>
            <column datatype='real' name='[Tests/1M pop]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Tests/1M pop]' derivation='Sum' name='[sum:Tests/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1050746126646198279]' derivation='User' name='[usr:Calculation_1050746126646198279:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='false' />
        </view>
        <style>
          <style-rule element='axis'>
            <encoding attr='space' class='0' field='[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126646198279:qk]' field-type='quantitative' scale='log' scope='rows' type='space' />
            <encoding attr='space' class='0' field='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Tests/1M pop:qk]' field-type='quantitative' max='50986336.137944378' min='1000.0' range-type='fixed' scale='log' scope='cols' type='space' />
            <format attr='height' field='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Tests/1M pop:qk]' value='84' />
          </style-rule>
          <style-rule element='cell'>
            <format attr='cell-w' value='42' />
            <format attr='cell-h' value='14' />
            <format attr='cell' value='14' />
            <format attr='cell-q' value='70' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <trendline enable-confidence-bands='false' enable-instant-analytics='true' enabled='true' exclude-color='false' exclude-intercept='false' fit='power' />
            <style>
              <style-rule element='mark'>
                <format attr='size' value='0.31784531474113464' />
                <format attr='mark-transparency' value='255' />
                <format attr='mark-color' value='#4e79a7' />
              </style-rule>
              <style-rule element='pane'>
                <format attr='minwidth' value='816' />
                <format attr='maxwidth' value='816' />
                <format attr='minheight' value='480' />
                <format attr='maxheight' value='480' />
                <format attr='aspect' value='0' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126646198279:qk]</rows>
        <cols>[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Tests/1M pop:qk]</cols>
      </table>
      <simple-id uuid='{302B1B5A-B088-45C7-A2BA-25F2B73794D5}' />
    </worksheet>
    <worksheet name='Pie - SEA Top 3 TotCase'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column caption='Top TotalCases and Other' datatype='string' name='[Calculation_1560778784028012547]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Country Set] THEN [Country] ELSE &apos;Other&apos; END' />
            </column>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
            <column-instance column='[Calculation_1560778784028012547]' derivation='None' name='[none:Calculation_1560778784028012547:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Cases]' derivation='Sum' name='[pcto:sum:Total Cases:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Total Cases]' derivation='Sum' name='[sum:Total Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <manual-sort column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_1560778784028012547:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Vietnam&quot;</bucket>
              <bucket>&quot;Indonesia&quot;</bucket>
              <bucket>&quot;Malaysia&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </manual-sort>
          <filter class='categorical' column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <slices>
            <column>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='400' />
            <format attr='cell-h' value='400' />
            <format attr='cell' value='50' />
            <format attr='cell-q' value='250' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_1560778784028012547:nk]' />
              <wedge-size column='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases:qk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_1560778784028012547:nk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[pcto:sum:Total Cases:qk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.5052486658096313' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
        <pages>
          <column>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{570A3CF5-F217-49CF-8F6D-FD12F22D42BC}' />
    </worksheet>
    <worksheet name='Pie - SEA Top 3 TotCase/1M pop'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column caption='Top TotCases/1M pop and Other' datatype='string' name='[Top and Other (copy)_1560778784030695428]' role='dimension' type='nominal'>
              <calculation class='tableau' formula='IF [Top 3 Country (copy)] THEN [Country] ELSE &apos;Other&apos; END' />
            </column>
            <column datatype='real' name='[Total Cases/1M pop]' role='measure' type='quantitative' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Top and Other (copy)_1560778784030695428]' derivation='None' name='[none:Top and Other (copy)_1560778784030695428:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Cases/1M pop]' derivation='Sum' name='[pcto:sum:Total Cases/1M pop:qk]' pivot='key' type='quantitative'>
              <table-calc ordering-type='Rows' type='PctTotal' />
            </column-instance>
            <column-instance column='[Total Cases/1M pop]' derivation='Sum' name='[sum:Total Cases/1M pop:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='relevant' user:ui-enumeration='inclusive' user:ui-manual-selection='true' user:ui-manual-selection-all-when-empty='true' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <manual-sort column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Top and Other (copy)_1560778784030695428:nk]' direction='ASC'>
            <dictionary>
              <bucket>&quot;Brunei&quot;</bucket>
              <bucket>&quot;Singapore&quot;</bucket>
              <bucket>&quot;Malaysia&quot;</bucket>
              <bucket>&quot;Other&quot;</bucket>
            </dictionary>
          </manual-sort>
          <slices>
            <column>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='400' />
            <format attr='cell-h' value='400' />
            <format attr='cell' value='50' />
            <format attr='cell-q' value='250' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Pie' />
            <mark-sizing mark-sizing-setting='marks-scaling-off' />
            <encodings>
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Top and Other (copy)_1560778784030695428:nk]' />
              <wedge-size column='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases/1M pop:qk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[pcto:sum:Total Cases/1M pop:qk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Top and Other (copy)_1560778784030695428:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='size' value='1.5052486658096313' />
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
        <pages>
          <column>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{255A9BDE-E4C6-4FC4-8A16-0248B79CA795}' />
    </worksheet>
    <worksheet name='SEAMap- Total Cases'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='date' name='[Date]' role='dimension' type='ordinal' />
            <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
            <column datatype='string' name='[Vietnam vs Others]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal'>
              <calculation class='categorical-bin' column='[Country]' default='&quot;Other&quot;' new-bin='true'>
                <bin default-name='true' value='&quot;Vietnam&quot;'>
                  <value>&quot;Vietnam&quot;</value>
                </bin>
              </calculation>
            </column>
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Total Cases]' derivation='Sum' name='[sum:Total Cases:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Date]' derivation='Day-Trunc' name='[tdy:Date:ok]' pivot='key' type='ordinal' />
          </datasource-dependencies>
          <filter class='categorical' column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]'>
            <groupfilter function='union' user:ui-domain='database' user:ui-enumeration='inclusive' user:ui-marker='enumerate'>
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Brunei&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Cambodia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Indonesia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Laos&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Malaysia&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Myanmar&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Philippines&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Singapore&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Thailand&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Timor-Leste&quot;' />
              <groupfilter function='member' level='[none:Country:nk]' member='&quot;Vietnam&quot;' />
            </groupfilter>
          </filter>
          <computed-sort column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' direction='DESC' using='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases:qk]' />
          <slices>
            <column>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</column>
          </slices>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='cell'>
            <format attr='cell-w' value='174' />
            <format attr='cell-h' value='58' />
            <format attr='cell' value='58' />
            <format attr='cell-q' value='290' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Bar' />
            <encodings>
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[Vietnam vs Others]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases:qk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</rows>
        <cols>[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases:qk]</cols>
        <pages>
          <column>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:ok]</column>
        </pages>
      </table>
      <simple-id uuid='{289B9F2A-89F3-412B-94AE-E846C82B7271}' />
    </worksheet>
    <worksheet name='TreeMap - Test vs Death Rate'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column caption='Death Rate' datatype='real' name='[Calculation_1050746126646198279]' role='measure' type='quantitative'>
              <calculation class='tableau' formula='SUM([Total Deaths])/sum([Total Cases])' />
            </column>
            <column caption='SUM([Tests/1M pop])/1000000' datatype='real' name='[Calculation_1050746126652297224]' role='measure' type='quantitative' user:unnamed='TreeMap - Test vs Death Rate'>
              <calculation class='tableau' formula='SUM([Tests/1M pop])/1000000' />
            </column>
            <column datatype='string' name='[Continent]' role='dimension' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[Tests/1M pop]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total Cases]' role='measure' type='quantitative' />
            <column datatype='real' name='[Total Deaths]' role='measure' type='quantitative' />
            <column-instance column='[Continent]' derivation='None' name='[none:Continent:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[Calculation_1050746126646198279]' derivation='User' name='[usr:Calculation_1050746126646198279:qk]' pivot='key' type='quantitative' />
            <column-instance column='[Calculation_1050746126652297224]' derivation='User' name='[usr:Calculation_1050746126652297224:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='mark'>
            <encoding attr='color' field='[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126652297224:qk]' max='50.0' type='interpolated' />
          </style-rule>
          <style-rule element='table'>
            <format attr='band-size' scope='cols' value='0' />
          </style-rule>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='on' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126652297224:qk]' />
              <size column='[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126646198279:qk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]' />
              <text column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' />
            </encodings>
            <style>
              <style-rule element='mark'>
                <format attr='mark-labels-cull' value='true' />
                <format attr='mark-labels-line-first' value='true' />
                <format attr='mark-labels-line-last' value='true' />
                <format attr='mark-labels-range-min' value='true' />
                <format attr='mark-labels-range-max' value='true' />
                <format attr='mark-labels-mode' value='all' />
                <format attr='mark-labels-range-scope' value='pane' />
                <format attr='mark-labels-range-field' value='' />
                <format attr='mark-labels-show' value='true' />
              </style-rule>
            </style>
          </pane>
        </panes>
        <rows />
        <cols />
      </table>
      <simple-id uuid='{402C7122-5702-4781-B91F-7134891B2666}' />
    </worksheet>
    <worksheet name='WorldMap - New Cases'>
      <table>
        <view>
          <datasources>
            <datasource caption='preprocess_data' name='federated.025vu620m6pvu71axal7z0iapj1l' />
          </datasources>
          <mapsources>
            <mapsource name='Tableau' />
          </mapsources>
          <datasource-dependencies datasource='federated.025vu620m6pvu71axal7z0iapj1l'>
            <column datatype='string' name='[Country Code]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='string' name='[Country]' role='dimension' semantic-role='[Country].[ISO3166_2]' type='nominal' />
            <column datatype='real' name='[New Cases]' role='measure' type='quantitative' />
            <column-instance column='[Country Code]' derivation='None' name='[none:Country Code:nk]' pivot='key' type='nominal' />
            <column-instance column='[Country]' derivation='None' name='[none:Country:nk]' pivot='key' type='nominal' />
            <column-instance column='[New Cases]' derivation='Sum' name='[sum:New Cases:qk]' pivot='key' type='quantitative' />
          </datasource-dependencies>
          <aggregation value='true' />
        </view>
        <style>
          <style-rule element='map'>
            <format attr='washout' value='0.0' />
          </style-rule>
        </style>
        <panes>
          <pane selection-relaxation-option='selection-relaxation-allow'>
            <view>
              <breakdown value='auto' />
            </view>
            <mark class='Automatic' />
            <encodings>
              <lod column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country Code:nk]' />
              <lod column='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' />
              <color column='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:New Cases:qk]' />
              <geometry column='[federated.025vu620m6pvu71axal7z0iapj1l].[Geometry (generated)]' />
            </encodings>
          </pane>
        </panes>
        <rows>[federated.025vu620m6pvu71axal7z0iapj1l].[Latitude (generated)]</rows>
        <cols>[federated.025vu620m6pvu71axal7z0iapj1l].[Longitude (generated)]</cols>
      </table>
      <simple-id uuid='{00C18281-DD18-46B3-A047-C72147686CAC}' />
    </worksheet>
  </worksheets>
  <windows saved-dpi-scale-factor='1.25' source-height='37'>
    <window class='worksheet' name='WorldMap - New Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[sum:New Cases:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[Country (group)]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[dy:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_20266234772402176:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_20266234772430849:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_20266234773012482:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country Code:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[sum:New Cases:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[dy:Date:ok]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[none:AdhocCluster:1:ok]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[none:Calculation_1402308370372378633:qk]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[none:Calculation_289356312468230144:qk]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[none:Country Code:nk]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[none:Date:ok]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[tdy:Date:ok]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[tdy:Date:qk]</field>
            <field>[federated.1wmsxx91yipf1k1dsgvfm1m4ou6h].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{F17A1498-9DBF-4158-8FFE-0B6EFD439776}' />
    </window>
    <window class='worksheet' name='SEAMap- Total Cases'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[Vietnam vs Others]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>#2022-05-19 00:00:00#</bucket>
          </multibucket>
        </current-page>
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[Vietnam vs Others]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[dy:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_397724180247695361:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_397724180247904258:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_397724180247949315:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[sum:Total Cases:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{B0BAA12C-6441-4043-8B9B-3BF6FB3446C1}' />
    </window>
    <window class='worksheet' name='Pie - SEA Top 3 TotCase'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Calculation_1560778784028012547:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>#2022-05-19 00:00:00#</bucket>
          </multibucket>
        </current-page>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[io:Country Set:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{4D732123-4830-4E2C-A435-EEE7345EFF86}' />
    </window>
    <window class='worksheet' name='Pie - SEA Top 3 TotCase/1M pop'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Top and Other (copy)_1560778784030695428:nk]' type='color' />
            <card type='currpage' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <current-page>
          <multibucket>
            <bucket>#2022-05-19 00:00:00#</bucket>
          </multibucket>
        </current-page>
        <zoom type='entire-view' />
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[io:Country Set:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{20EE63BF-3FCE-4A02-A302-993C2ADCED38}' />
    </window>
    <window class='worksheet' name='TreeMap - Test vs Death Rate'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126652297224:qk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[io:Country Set:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country Code:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[tdy:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126621638657:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126646198279:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[usr:Calculation_1050746126652297224:qk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{5721052C-A743-4659-A8F3-939A186D6B50}' />
    </window>
    <window class='worksheet' maximized='true' name='Linear Model for Test vs Death'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
      </cards>
      <simple-id uuid='{C19C6336-EE99-4C41-9B0F-06F95A2778B6}' />
    </window>
    <window class='worksheet' name='Line - SA TotCases/1M pop'>
      <cards>
        <edge name='left'>
          <strip size='160'>
            <card type='pages' />
            <card type='filters' />
            <card type='marks' />
          </strip>
        </edge>
        <edge name='top'>
          <strip size='2147483647'>
            <card type='columns' />
          </strip>
          <strip size='2147483647'>
            <card type='rows' />
          </strip>
          <strip size='2147483647'>
            <card type='title' />
          </strip>
        </edge>
        <edge name='right'>
          <strip size='160'>
            <card param='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]' type='filter' />
            <card pane-specification-id='0' param='[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]' type='color' />
          </strip>
        </edge>
      </cards>
      <viewpoint>
        <highlight>
          <color-one-way>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[dy:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Continent:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Country:nk]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[none:Date:ok]</field>
            <field>[federated.025vu620m6pvu71axal7z0iapj1l].[yr:Date:ok]</field>
          </color-one-way>
        </highlight>
      </viewpoint>
      <simple-id uuid='{BB963330-EFCD-467A-A443-38B4B2983522}' />
    </window>
  </windows>
  <thumbnails>
    <thumbnail height='192' name='Line - SA TotCases/1M pop' width='192'>
      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
      32R2AAAAAElFTkSuQmCC
    </thumbnail>
    <thumbnail height='192' name='Linear Model for Test vs Death' width='192'>
      iVBORw0KGgoAAAANSUhEUgAAAMAAAADACAYAAABS3GwHAAAACXBIWXMAABJ0AAASdAHeZh94
      AAAgAElEQVR4nO2dd3Rc133nP286pgKYGTQCRCVIgCDYm2QVS5Ylx7KtOG6yvfZuvIkSb5KT
      snHirM+JNtls4mPHiXMSJ25xiR3H9rqpWZElUaJIsYEgAYIEiEL0OsDMYHp5Zf8AMSYIkATA
      AWaAeZ9zeA4x5b17573vu7/f/f3u7wqKoiioqOQomkw3QEUlk+jW+4SyLKMoCurAo5INrLsA
      BEFAEAQkSUKr1a736dcdURTR6db9Z153FEVBkqQN19d1aa2iKEzPzOB2uRAEITUKCIKwHqfP
      OLnUz43W13XxATyj/Zy50PHLk2o0G+6HUtmcrIsAisprKHXaUn/PjwAqKpkmI7NA6gigki2s
      gwAUhvu6iMfiXLraP/eKOgukkiUImQiEbdQZg9WQTCbR6/WZbsaas1GvaUZMINX8UckWMiIA
      1fxRyRbUVAiVnCbtBpsYD9Pa2oasM3PgwB50AvRevog3KuIuraR6i1s1gVSyhrQLIOAZpnjb
      PizBHiYCIuUOHYFQAK3Ois1qSc0AKYqCLMvpPn3WkUv93Ih9Tb/LrihoNBo0Gs11W19h76H7
      UKQ4Z1ou4zy8L+UD5IIvkCtTvjc+2DYSaReAzb2FrpazKFoTB8pkPNM+QtNjeAIhzPklCIKA
      VqtFUZScSIaTZTkn+jl/42+0vmYkDgC5kyWpxgGyG3UaVCWnydg0qCoClWwgY5FgdSpUJRtQ
      A2EqOY0qAJWcRhWASk6TEQGoK8JUsgV1RZhKTqOaQCo5jSoAlZxGFYBKTpN+ASgKnvFhpryB
      1EtiPEJvTw/BaCLtp1NRuRvSLoCIf4yRmTgTfVcIJOZmejweD4UuJ1c6rqT7dCoqd0XaU/ci
      AR9FFQ1YQyLeYBK700BJWTl9XR24S8uQZTn1L5lMpvv0WYckSZluwrqxEae30y4AQ54Fj89L
      PBjCXqcDFK5d7cBWWktxgRWYmwbdjOnQkiTzzMmrNFYVsX2rM/W6mg6dvaTdBLK5tqKPTSDa
      SinQJ/FM+5ClueJYV/tH0326rCKaEPn+q1c4fXkk001RWSbqgpg0MxOIYDUZMBrm+qYuiMlu
      NlZrNwBOuznTTVBZAWocQCWnUQWgktOoAlDJaVQBqOQ0qgBUchpVACo5TdoFICWjtJw5xdnW
      DuTrEYaQb5JfvP5muk+lonLXpL847tQgrpo9mAM9jAdFtth1CAYLBTYjsLAe0EbLG1ktudBP
      tTbodWRJRqfXoTfoiElzP4bFYuXGBZDzyXC5gCzLOZEQN18ZeqP1Nf3FcV1ldLacRtboOXR4
      rjhubHaS/v5+DJZCdm2vThXG2mhh89WgKErO9HMjpkKouUBrjJoLlN2os0AZ4BsvXOS1CwOZ
      boYKal2gjHDq8gidg9OZboYKqgm05ixlAsmygiBsru1iN6oJlJHW5voIoNFsnht/o6NWhlPJ
      aVQnWCWnyZgTPDU1xdmzZxkYGCAQCGz4wNiJ9iGee7M7083IGhRF4YfHrtDaPZ7pptyWtPgA
      shjnSkcHmJ3srK9CAPyTw/QMT1K9bSdJ3wgj07O4rm+UrdFocLlcGI1GPB4PHR0dhMNh9Ho9
      +fn5uN1u8vPzMZvNG8ZUeqN9iFFPgMfvqc90U7ICRYFnTl7lnqYK9tWXZro5tyQts0AzI90E
      dCVofH1YKnfjMitcON/OruYdtF++hhTz4izeSll5BSb93KBz8yyQLMskEgn8fj8ejwe/3088
      HsdoNFJYWIjL5cLhcGA0GrNSFLGEiCQrWEwLZ3zWKhD2lWfO4w/F+NSH7037sVfDUrNAoWgC
      g06LQZ+9W6emZQQQkwnMDgu6hIloQgIzaHUmdDoDegEadu0hHA5y4cIlDh/YdcvCWFqtFqfT
      idM5V1NHkiRisRh+v5/h4WE6OjqQJAmTyYTT6cTlcmGz2bIi0qoVQKtlUZ/WKjdmyhfGF4ze
      trhYIBznx8e7eN+DDVjzDGvSjhu5eXbPqBMAmWQye83btAjAmu/kSs9llESUnSUQCifRySG6
      e7qRjWY8k5NIKGh0utQu8suJA+j1ekwmE/n5+VRVVaEoCqIoEolEmJ6eZnBwkGAwiEajwWq1
      4na7KSgowGq1ZtWGzWsh0D/80FFkWbntsQcmp3nudC+HGivYXVec9jbcyEaNA6QnEKYohAJ+
      0Jsxm7TEExJGnYBvNkR+QQFyMoY/ECa/sBC9dmkTaPWnVkgkEoRCITweDz6fL+VP2O12ioqK
      cDgcmM1mNJr19/nXwgSa9IY43jbEu++tT9UfWgpFUZjwhih12tJ6/luda6MIYHwmiMVkwG4x
      bs5IsKIoRKNRAoEAHo+H2dlZotEoeXl5KSfbbrdjMpnW3J9YCwG8eKaXrz7byt/+j7dTUWRn
      whtii9ue1nOslDsJ4C+/+To7Kl28/60717llCxn1BPifX/oFO6vdfOZj92/OSLAgCJjNZsxm
      MyUlJalzRiIR/H4/o6OjdHV1kUwmsVgsFBYW4na7sVgsGAyGrHSyb+RtB2pori2mzGXj1fP9
      /ONPzvLZp97Gtgrnnb+cIbIl7l9UYOGjb2+m3D03Km7KEWAlbQiFQni9XqanpwmFQgDYbDZc
      LheFhYWYzWZ0Ot2qRbHW6dDTsxFeOd/Pu+/dTp4xc7/nRjKBbiSnBbAUiUSCQCDAzMwMMzMz
      RKNRdDodDocDl8tFQUEBJpNpWU72T9/oor1vgk99+C2YbmOrbwY2qgA2VmvXAYPBgMvlwuVy
      AXMXNhaLMTs7y/T0NP39/cTj8dTslNvtxuFwYDAYFjnZ4ViSQDiOtMGj3OnEG4hiNumz5oGg
      jgCrQFEUwuFwKmg3OzuLKIoL/Amr1Yper0cUxXWJU1wb8/HVZ1t59731HG2quKtjiZLMsdYB
      9m8vpdCet6zvLGcE6Bv18qdffpl7mir4gw8cvas2potN6QSvNYIgYLVasVqtlJeXA3N9CgaD
      eL1eent7CYVCyLKMxWKhuLgYt9uNyWS6K3/idkRiScZngsyG4nd9rJGpAF/66Tk+9uhufvX+
      HWlo3RylThvvumc7jVXutB1znqHJWb78zHl+79cOUVxoXfb31BFgDRFFkZmZGfx+P9PT07R2
      DVNcaGVb1RZcLhdOpxOj0ZiV6eFXh2aoKnHcNs5wI+vlA4jS3MNTr1vog3UOePirf3sDp93M
      4/fU88CeymWlYGiffvrpp9eorbdFluWMBKaWiz8U4wvfP0VRgQWXY3U1/zUaDUajkaKiIno8
      It87OYrFXsh9e6rx+Xz09vbS29vL6OgowWAQRVEWTMNmUhQuhxmddmXXR1GUBddUVhQ6B6fJ
      t5o41jpAuduOdoXHvJmvPHueZ092o9EIVBTb0QgCx9sGef5UD7///iMcbxvk9JURjrX2s6PS
      tcCE6xmeYXQ6SFGBJfXbbu5H8F0QjYt0DU4zE4im5XijniDlLjtPPXGYQnteKj4xH7Tzer2M
      jY1x+fLllD/hcrlSQTutVrtsQSRECQ0COl1mHjBJUUKr0TDsCfCZr73Kkw/v4ju/aMeg03L/
      nsplHUNRFNr7JrGZjdSUFaRejycleka8XOqfQpJkHj5Qw8WeCS4PTOENRqkocjDeNYooyZy/
      OkbdlsLUd//uh6cZnwny9H97kF01xSRFSTWB1prVxAEURSEUCjE9PY3H4yEQCKAoCna7HZfL
      RVFRERaLJVVf6UbiSZGnPvcchfY8vvA7j66qzYqicLZzlC0uO+VFy4swz5tACBo++bfP88Ce
      Sj7y9mZGPAG2uGxc6J5gz7aSRctBJUkGAbQ3WQPTsxF+74s/51eObuOjjzQveC8cS/B7X3yR
      x49u44n7dnD+6jgef5hHD9Xx+sUBxmZCvOveeswG/YKHQOeAh++90sFvvms/ZzpH+PdfdCw9
      AkR84/z8eCv37N+D1VWEzXSHC6goyIoCgoDm+gWZL5Mn3PD3UhdMZe63aekaY4vbTpnLhiAI
      2Gw2bDYb1dXVwJzJODs7i8fjob29nXA4jCAIOJ1O3G43LpdrzsnWaHhwbxX5VtOK2jAbjvG1
      Z1t54r4daASBv/7uCRq2uvjrp9624v4Iml9e5/LrKRr7ts+tCWjpGuOV8/187LFmSp02/vif
      f0FJoTWV1i3JMhpBwOUw879//UHyjIvvPZ1Ww39/516O7CwnlhD53H+8SSwhkmfU89Z91Qs+
      O+2PMOENsbPaTUOVm7/4xFsB8IWcPLCncmkf4Ozpk2j1Ghy6JOMJGyX5t58Ki4VmOH3uAsPD
      E5SWl6MVFHo6ztM3OMRsXEPCP0pv/xDDk7OUl87NAGS7D5AuZFm+Y9Cse3iGP//G6wxO+nno
      pgs4jyAI5OXl4XQ62bp1K7W1tVRWVqLX6/H5fHR3d9Pd3c3w8DB1pVa2VzgxmUzL/o1nZiN8
      /fkL7KwuYnddCTu2umiuLea7L1/CqNctK6FurgqelnfdU8+u2qWzT0+0D/Gf53o5uKOMkkIr
      s6E4VSX51G4pZHwmxG987lmcDjPVpQU47WYGJvx868U23A4Lzuu+2ItnevmHH52lqbqILW47
      u2uLceWb2b+9FJvZuOB8//KzFv715xd57/0NC3ya4gIrhxvLlzaBZoa7+eFzL4E+nyc/+iEc
      ptubKpMDl1Gc29H5uok7trHFIdDe1s2u5u10tHfR1NyIb2KIkYBC07atqfUAuTAaSJK0rKhx
      a/c4W1y2FU3hLUUikWB6epqpqSlmZmaQZRmz2Yzb7U6ttBucDGDNM+By3P7BdrF3gs/++yne
      c289H3r4zklsNz/Ueka8/NlXj/F/PvHggn2Tb0UomuBfn7/AO45sY1v5nO3+4tk+vv7CRX7z
      8b08cqAGgKQoc6FnnEMNW+54TG8gyqQvTEOla9F7z53qXSwARZY5deIVdu6/n8C1Fvz5O9lV
      kX/bk3iGuohZKtF6u9GWNlFshYsXLrN7dwMX269SWmDAJ5nZUf3LBi/3xtjo3Ojr9I76KLSZ
      lh1cSgfzTrbH40mli//ffzvB9upSPvXxt+NyubDbb23ny4qSMmvvxM3XdHo2wlefbeUTj++l
      KN+y6j6spA0r4dNffmWxAKK+Uf75a9+koGgrjsISHnv0IcyG29+oUiLCxYvtYMpnd0MlvkAC
      Jezh2vg0FTUNeK51IGqN2JylbL8uglxzghVF4b2f+QFHGsv5k49kbhmjoihcGZhCp4hopLmF
      RcFgEK1Wm0rtcDqdmM1mXjzTy6QvzJMPN90xHnC3cYAJb4g//tJLPPXuA7yleeuqjrFSJFle
      2gQKecd5/eQZEqLCkbe+g9L8lTlUyyEXBdDeN4k730KZa20XqPSOenE7zDiW6QjPr7SbT+2Y
      np4mFovxrf+8hD8m8NnffQ91VVswmW59vNUI4NmTVwmEE3zgoUb8oRif+doxPvHOvUuaNomk
      xJUBD/UVTsy3mZRRFIXvvdzBtvJCDi7DRFrSCW459QZhUWJrsRt9fjEF5vSvJ93MTnD/mI9I
      TMRuMaacYEEQKCm0LnLS0k00nuS3//Z5guEEhxoX3gB/9E8v8YtzfTy0v3rBdKQgCGi1WiwW
      C263m+4pkW+8OkhMMPPk25pwmaGnp4fe3l7GxsaIRCLAXOLgjSbPzYGwO/EvPztPR/8Ujx6q
      o8CWx6MHa6kosi/pG750ro/Pf/8UWkGg+RYONsyZS3/1b28gIHBkZ/kd27CkXEu2VGEP+zl9
      4SqP1u9fdodUIBxN8Kl/eRm72cDX//Q9a36+pCjx/167wp5tJTRUujEZdPzJh++losix6LO1
      ZQUIwJ3MaafdnFpcs7thG43V7tQTPhaLMTE5xd99+0Uq3SbqthSmnOz8/HwKCgqW7dv9zVMP
      IytKaqrzdqkL9+2uRKvVUOa08fXnL/Chh3ZiWWKhv0YQ+MQ791G3pWCJoyxmkQBiAQ+XL3dS
      veco9zbHiCXUVN6VYDbp+cMPHsW8TotTIvEkPz7eRSIp0VDpRhAEDjcu/eT75K8eXNYx920v
      Tc3bzzO/oYnVasWNjv6Qmd17tnP//dsJh8N4PB66u7uJRCJotVpsNhtut5vCwkKsVuuST/Xl
      5hkBWPMMvP1gLa9dGOCZk1cpd9l49HDdos8JgsCjh2qXfdxFPsDJl5+jtOEg537+PUT3bj7w
      +AOphezpJNd8gLVCURS6hqYpd9vX3Ly6kUA4Tp5Rl0pKmx8htFotiUSCYDDI1NQUPp+PSCSC
      wWBYUPQsLy9vVdPgsqzwo9ev8N2XL/HXv/m2Jac370QkluRHr1+hqMCyeAQQ4wGOvfQiUxN+
      XJpBJvxxKpzrN22ncmeSosTgxCzlRXZMBh0NlelPL74TdsvSYhMEAaPRiNFoTC0qujo0TYXL
      nHKye3t7SSQSmEwmHPkFtA0G2VLiorbczdbixabbjWg0Ao8eqsNiMqTMnKQo8WdfeZW37Krg
      PffdOX17whvipyeu4s43LxbAkYefYHcskfrbYl2/p4rK8jjWOsCXfnqOJ9/WxAcfalr1ccZn
      gvzlt47zyScO0lRTlMYW/pLW7nH+9zdf59MfeQtHdpZTVlYGzFkA0WiUrr5hvvPsG4RCQXQa
      gT/7+ENUbClFZ7JQWVaEwbB49NTrNBy7MIBWOycGAQGHxbhk2sRS1JQV8OU/epwT7UOLBWA0
      mdFptcx4/ShA3urjFyprxMGGMj4W3c3RpjvPctwOjUaD2ahfcdrzclAUhcGJWRor3fyXtzez
      q3ahwHQ6HTabjYN7GvnO31Qx5Q8zMDbD/h1FfOkHx3n17GU++vAOtlXMFTubz4qdN53MRh2G
      6+aXTqfhMx+/H5iLJv/sjS7u211529HElW+m0JG3dByg5fXn6J8R0Wvg8IOP3TEOIEtJujsv
      I1hc1FeXIwBB7wTdA+PU1Ddi1Yl0XhumufGXw9NG9gHOdc6l2y5n6WGubpLX0jXGX377OH/+
      8QcWOdR3YmDCT1vvBI8cqAU5ic/nS2XFJhIJzGZzql6szWZbsIbi/NUx/uJbx3nfAw08uLea
      z373BH/wgaPULjErNDjhXzwCdJ1/nTfOdWKw2tBrNMTFO88Cecf6yCuuQ+vvYypYQrENrg1M
      satpB1c6r7FzRyV+vy/1Q83/22h7ys5z/uoY8aTEoYayO342m/p5vG2IAlseu2oW+wyyonC8
      bYhCex7NqzSHbtwnePvWQr74u4/icphX3P8Kt40K93yw0EhJSUlq/YQkSUQiEURRRJZlxsfH
      UwULtFotDoeDP31fM/XVZegNeu5pKsflMC3Zhr5R72IBbN93PwmNkbqdB4mOduJbRuNlWUav
      N6DVaZHnxxONBr1ej4CM3mjGYlr74qzrxW+8a1+mm7AqvvbcBSpLHOysfmBRbo0vGONbL7ZR
      WexYtQBuxGzUYy5K/8g3P8U6j9PppKKiIlW9IxAIMDU1RUd7G7FYjAqzmaH+XtxuNzabLVVd
      fGQqQDwpLpEL5B3hi1/6Ks6yavLybLzj3e/Cabn9zZuI+Dl/4TLozezbs4NAMEFkeogxXwj3
      ljqMiRlaO65Ss6OZXdurU0+KjW4a/Px0D6Fo4rbl/rLJBJr0hTDqdbdcKzAxE8JkvPX7336x
      jUg8yW+958Ci97KxLpAsy4RCodTsUzAYRBRFrFYrr7ZPcrrHe4tcoNkZhobHEGWFqm0N2PPS
      fwE3sg8wz1988/W5tcO3WXmVTQK4W770k3OEY0n++Ml7Fr2XjQJYClEUCQaDTE55GBgeWzoV
      4nLrKdqvjVLkKMBSWpt2AWzkkig3ssVlS7tpJ0oykVjylvPsy2VsOsiXn2nhQw83pS1OsNxI
      cjaj0+koKCigoKCAHdvrl94jzJpfRHN9DRMzXmR5bW7WzSCChCgjptnB/cnxTp76/HP4g7G7
      Oo4/FKOj38NXn21NU8sW0j08w8WeiTU59p3oHfXyv776Kuc6R+/6WEuOAFvLS3nh+Bi/8uhj
      2Gzpd143y9rg335isS18tzTXFpNISrdN+V0ODZUuPv/JRxakR8TiIlqtsKimzmr49ottjHtD
      fP1P3n3Xx1opwUiCoclZvMG7r9ixpA9w8tiLhEWFapeNSOFOdlcuL7NuuWwWJ3g5ZJMP8Ot/
      8zP21ZfyO+89dNfH8vjDJJJSal+CtfIBwrEE//TjczxyoIa9a7DZ3pIm0M4d9YwMDnGiY5ya
      kvQv3sjGSmi5wKMHazmw/c6xi+Xgzresy6YciaRM19A0U/7Imhx/iTXBCU68/BIDU7Ps2HOE
      Aztr0n6zbpQZg3SQTSPAzZy5MsrZzlGeevf+u97JcaNe00UjwMWTr2Ku3MNHPvxBooNtDHrT
      UxntRuYjwSqZZWhyltbucUQpO9Z8fP/Vyzxz4uq6nnORAPwBH5P9nbzyyjG8fg9T/lsIQJEZ
      7O1kbHo29VIiMsuljiskJIVkLEj7pcvERYXA9BgtLS30j3rmTqqaQFnB+9/ayDc+/Z67drjT
      xcWeCTr6p9b1nItMIJ9njHGPP/V3RXU9trzFw5p3rA+PaCPp6aeq+RBWvULr2Rbqd9RwddCL
      JuZnW8M2uvomMQhxmnY1X1+ON3fjb4ZA2HLIZhMonaTDBJq/FVfycIwnRH77C8/zyIFannzb
      ylPDF7W2wF1GgfvOjlI0GsFVWo2ozBCKilj1MjqjA6stH4M8hmKwYbXYMTKG057H+XNnEPIK
      2bez7pYbZW9GsiURbj3IxL4PoiRh1OvQ64RV3U+rlqvJlIfX6yUxE2RrqQ5QkBIBwqFZkhoT
      QmyWSCRIXNGgNxewd285Z893rmij7M2COgKsHXq9nn/8/XcgaIRVFc9adXVoRZHo7+5Cn19K
      aYEJf1jEqpe4em2M7Q07EBJBunqHqW9oJBn00Ds4QV1DI/brK/lzRQCqCZTdqOXR1xhVANlN
      RipTbfQ9wlSyl3hSZGDCf+cPXicjAlCnQVUAXjjdw6mO4bQe88fHu/ijf3qJHx67vKyH7Oas
      TaiyIXj+zR5euziY1mM+sLsSlz2P5071LOvzqg+wxqg+wK0JRRNoNcKyy5ksl9lQjNlw/JZ1
      Rm9EFcAaowogu1GdYJWcRnWCVXIa1QlWyWlUAajkNKoAVHKa1QtAUQiHAkTjv8zAk8Uks7MB
      ZEVBlpL4Z2eR5Ov/9/lIiLmTGamSeWIJcW4n+tuw6jmrkHeMKwPTKMk4ew4exKiFzksXEAwm
      ZGMh2tA4iiEPUWvDaUwQSSp4r41yeP/qy3mrqCwHWVb4wbHLnLo8wq6aIv7rO/bcsgL2qgUw
      6/dRs6MJyXMVf1ii2C4jaew0N9Zyqb2TpGCluaGeS+1dlNU3MjHYg5ifn1oLoK4H2HxkYnq7
      a2iGSV+Y+5or+NcX2thdW3x926hOjjZu4aVzfQQjce5r3sru2sU1T1ctAK1WRywWIxmJ4yie
      U5ckxZHEJCJakOJIUpKkAiN9nSTz3DRUzVUoU9cDbEwURaFnxEu5275oGWWmAmGz4QRT/gha
      rY7hqQCz4TgOi4lPf/Q+9tQV86QvzA+PXcEXjC15HVYdCZaSUToudaC1utlRVYQ/LCJEvfSN
      eqipb0Ib9dAzPEnVtkamrnUQk7U5vVH2ZmAmEOGTX3iB9z/YyPsebFzwXrZEgl85f4223kn+
      8INHl/V5NRVijdlMApj0hfmtzz/HE/ft4OOP7V7wXrYIYKWo06Aqy0anFdDrNeu2Bex6oI4A
      a8xmGgFkWeGN9kGaqotwOswL3tuoI4AqgDVmMwngdmxUAagmkMqGZHhqlr//wWlmQ3dXRl4V
      gMqGZMwT5I1LQ3jvch8F1QRaY1QTaO3OJ0ryXe91oI4AKhsSQUjPRh+rFoCUjNLWeo6O7gHm
      h5CZsQHOnjvH9GwU38QQZ8+dY8ofIR72c6rl4l03VkUl3axaAJ7RQZyVjVhEH76oDIgMTcyy
      f89OhgeuMTDmZf/eXYwM9BNNSAhyIo3NVlFJD6s22CRJxGQyoTcbSSZlyJPRao1odXp0SCha
      I1qtHr0A+QVO9LoBADUZbg0Ix5KcvDTEQ/uqb5n1uB5sxLXeqxaAPb+Azq4OlGScXaUSwZCE
      Vg5w5UongqUQXWicK52dKCYbM5OjTE5OMjQ2xdayIjUZLs2cuTDEV567SGVJIU1p2OV9NWzU
      OMDqZ4EUhXAoiMaQh1EvkBQV9BoIhqPY7DaQRQKhCDabnXgkSCwhotUbcdgs6iZ5aWbCG+JH
      r3fy8cd2Y81L/66eyyH3BHCX5MoIoE6DZjdqXSCVnEatC6SS06gjgEpOo44AKjmNmgqhktOo
      JpBKTrMyASgKkXCQeEJMvSSLSYLBUKoYViD1f5FAIIisKCQTMfx+P5FYfO6kqgmkkiWsaNI2
      MD1C19AMcjLJvkMHMGjgSnsr6AxobSUo/mFknQEhz4UmPI6kNaIY8iE0gcFWgKOwCLPJuFZ9
      UVFZMSsSgM8/S31jM+HxToJRCadFRNYW0LyrikuXulA0dpqb5gpjSVhp3jlXGMtk1OP3eUFv
      pajApuYCbVI2omm7IgFoNRriiQTRaAKrTgPokKQYUjKBiH6uGNaCwlgiogJV25rQ6QTOnWtD
      U1Wq5gJtQjZqJHhFqRBSIkx7+2UMjiLqK1wEYiAFJ+kf91LXsAslME7f6DQ125vQRqauF8ba
      ScI7zIQ3QFFFHZUlhYCaCrHZyAkBpBNVAJuLjSoAdRpUJadRI8EqOY0aCVbJaVQBqOQ0qgBU
      cpqMCEBRFNUJVskKMjYCqE6wSjaQEQGoN79KtqD6ACo5jSoAlZxGFYBKTrMiAcjJGB0XW+kZ
      GEsVxPVNDNNy/gKzkQT+qVFazrfiD8UJTI/Rcr4VbzCGb2qE8y0tDE1416ALKiqrZ0UCmBjp
      p6CiHjkwTig+VxB3YHSa5sZqrvX10z88RXPTNq5du0bf4AS7d+1goO8a+jw7e/bsYnJ4aI26
      oaKyOlaUupcURRxmM1hNxEUZm1FEq7NgMJnRyXEUnRmDIQ+9kkTR5aHXG9ELCqj2c38AAAZ+
      SURBVEadwMUL7dTsaFKL425iNmKS44rSoX0TAwx5EyRCfpr27AFZoaejDVuBnbBsQQmMYy3I
      J5g0og1PYSkswB/RIM2O4Kyow261UZhvA9R06M3GRk2HXtl6AEXBOz2F3pKP2QCxJBi1Mh5v
      kKIiN4hxpryzuIuKEKQEU9M+3MVFBGc8hGIJTBY77kIHoApgs5EbAkgjqgA2FxtVAOo0qEpO
      owpAJadRBaCS06gCUMlpVAGo5DQZc9kVRUEUxTt/cIMjy3JO9BM2Zl8zJgBBEO56ymx+ZZlG
      c/uB7E6fkyQJrXbxruM3v367v288x83nS8fU4K3auJLPybKMIAiL1mMs9Z1b9e3m9+b/rygK
      giAsq42rbf9yP6coCrIs37ZP82QsDrDcjm50cqWfy30YZRsZE4CKSjawseSqopJmMhq3nhzq
      5dzlQd7x2MNoBZDjs5w43Y6i0XFwXyOt59uRBS379jbRdqENCQ17Dh7GbsqecHsi7OfUqZNs
      2fUA5aYQZ9p6EXR5vOWe/WgUhc62FgLRBPlb6sA/jD+SwF5cjT48znQohs1dyc7aLZnuxm3x
      e0Y5ffoC9zz2ONHRq/SMeTHZCqlyaOgcmcZoyefQ7gYUWaL17JvEkxJVTUeY6D5HPCFR0XiY
      mWvnicQltmzfz1a3NdNdSpHREcBdXkN5cX7qb9/YBLV7D7Jrq4tr14bY2rSX3TWlDPQPsmX7
      LvbWb2XGH8hgixejNztobqgDBaZHp9h19F5qC3T4EoAikdCZOXTkKLHZKWIYOHT4KImgh7Cs
      4/Dho4jhmUx34Y44nKXUbS1FASYDce49egS9EmfMH+Xeo0cwCnNp7bIYxeQo48g9h5kZ6UFv
      LuLIW47iG+1BY3By5N6jzI4PZ7YzN5HRR+nNDpNOJxBPSOhECYNeQyIhkRQl9HotyaSEKIho
      tNlltQmCwPycilankEjIxJMyVg2AgCzKgIIsKyDLwPXZmOvfka+/ls0IGg3zDRZkGZG5dusB
      iRv6IGiQpCSKFEcWjChSAqQEEkaQEyAnkDJ7yy0io3fTYM9lJqc8dPUO0n+tD0tpJf6+Swz6
      E1TXbSM03EWfJ0x1XR2R8T66R/2UOB2ZbPIiQt4JrvSOMNTXibm0iqH2s/gFM8bIJCPTEdw2
      HWfPnKW4opbi/DzOnjmFu7yWkgILZ8+cxllWneku3JHJ4WsMTXjovnKViooiWk6fJs9RRHVl
      CS2nz2CyuZgZHSAg6jER5ez5Lqq31WLRiZw+20H1tjrsJpnTZy6xtbYq091ZQJbMAin4fX4c
      +QVslpJBwVk/eTYHOs0m6dBt2bjXL0sEoKKSGbLLoFZRWWdUAajkNKoAVHIaVQAqOY0qAJWc
      RhWASk6jCkAlp1EFoJLTqAJQyWlUAajkNKoAVNaM8MwoL77wHM///D8Z9gSX/EwsFkW+KRkn
      GZzkzMVuZsb66RqYwDPUxZm2XkCh7dRrXBv3rbpNr508tyADV/v0008/veqjqajcBoPZjt53
      FV/hPvZW2Tl/6gSeiIBNE+PEm2fRGw18+R8+R9JYjEUIcuZ8B4XFpQx3XsBQUMrV1pfpmtCS
      Fx/k1ZZrHGiu4tn/+A5hRx07KgrouHiRnu6rGOxFRKcHOdN6BVdZKVfbW+js7Ca/pAKTfu4Z
      H43F6erp5z9+/AKiKLGtZiuCIKgjgMr60H/uRU50TvLCsz+h5c0TxI0OjCYbNTU1HNq/i/Mn
      jpOXXwiyxLXxINuqy9i7u4m5cgIaaorzaLvSi6us6voRJU6ebGHP7gZeePYZnvnFSQ7uLuWn
      PzvGidMXOLy3nJ8980bq/K+dPMuXv/UDSopc1NdWIl/PAc2u1QkqmxaNVkd5TQP3Nz2EIMWZ
      HrvKC6+1YhEgHI2y975H6Gs7ybGxYazOanSKRDyeQEzKKEBlbS1vHjvJfYeqmd9nSNAIRAI+
      9HlWxGCUSCiMzmBAIwjMzngx2Wyp89ttVvY3N7J9WzXb6365BkMVgMqa4q4/hFmTj9v+KLG2
      VsanA9SWWPHHTLzzkb2YpB30DA9T7jKgKazFGZyiurGORDTAsEehfquZ8urt5Fnt5Nvz2eI0
      UyabARBjIfrGQrzviV9BDE5yuXeSX3v8Pv75708z4Mvjve9oTrWjacc27j20l3gisaB96noA
      laxicmICd0nJMmxzmcGBESqrti54VVEUhoaGqazceovvLUQVgEpO8/8BcWz2aSHCQFMAAAAA
      SUVORK5CYII=
    </thumbnail>
    <thumbnail height='192' name='Pie - SEA Top 3 TotCase' width='192'>
      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
      qSsUe/8NZ/AtKG5+myY3568eIJVIkHj+BDWvvCIBqCSryWmuXrlKc9Nu6uriXLzSy/TUHIm4
      5vK1q+iO3TTUxLh49Qavf/OPUddukE1NUcjnNj74BpQdJtT1IqGuF9G5FZzRszh9b+KMnoVi
      9pGf9cM6oCoWI3b8GImXXiL+3LNYifVGubQBKojnuRSLDpZtEw6F8DwPtAbFx36vlEJrDdpD
      KwvbKv3TrtYaCmu4E+dxRt/DnTiHtzgC+t5Jvys3nsFd3eHLzLIItbcRO/o08eeeIfrUU6hY
      bP2udhcJgCgZ7TnolWncmQ9wZ3rxZntxUzOkzrSinTJeZkph1dQQamsjevgQkSNHiD5xBLup
      CWXbj/6oBECUjdboQhZnfpHi9DTFySmcuTncZBI3uYibSuHlcut3sTs/6x/kowa3Uh/9WPE4
      dkMDdnMToZYWQnv2EGpvJ9zeht3SghXb+nwDCYAwR2u06+JlsuhcFu24aNcB1wVloWwbFY2g
      olGseBwVLv1KeBIAEWjyHkAEmgRABJoEQASaBEAEmgRABJoEQASaBEAEmgRABJoEQASaBEAE
      mgRABJoEQASaBEAEmgRABJoEQASaBEAEmgRABJoEQASaBEAEmgRABJoEQATa/wMGkFB4pI2w
      +gAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='Pie - SEA Top 3 TotCase/1M pop' width='192'>
      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
      AIhQ+38emclEUKGaFAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='SEAMap- Total Cases' width='192'>
      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
      BH3N/weUyiYPwiQibAAAAABJRU5ErkJggg==
    </thumbnail>
    <thumbnail height='192' name='TreeMap - Test vs Death Rate' width='192'>
      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
    </thumbnail>
    <thumbnail height='192' name='WorldMap - New Cases' width='192'>
      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
    </thumbnail>
  </thumbnails>
</workbook>
